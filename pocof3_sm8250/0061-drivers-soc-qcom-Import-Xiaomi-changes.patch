From 8633aed0bf9ec2e4684941cf86deb7288a401b80 Mon Sep 17 00:00:00 2001
From: Sebastiano Barezzi <barezzisebastiano@gmail.com>
Date: Tue, 15 Nov 2022 17:18:36 +0100
Subject: [PATCH 061/157] drivers: soc: qcom: Import Xiaomi changes

* From dagu-s-oss

Change-Id: Ib1a9f3dbe22a9ba673ed141615256f531cce8af7
---
 drivers/soc/qcom/fsa4480-i2c.c     |  16 +++++
 drivers/soc/qcom/service-locator.c |   2 +-
 drivers/soc/qcom/socinfo.c         | 108 ++++++++++++++++++++++++++++-
 include/soc/qcom/socinfo.h         |  42 +++++++++++
 4 files changed, 165 insertions(+), 3 deletions(-)

diff --git a/drivers/soc/qcom/fsa4480-i2c.c b/drivers/soc/qcom/fsa4480-i2c.c
index 562509e3b018..a93706939123 100644
--- a/drivers/soc/qcom/fsa4480-i2c.c
+++ b/drivers/soc/qcom/fsa4480-i2c.c
@@ -356,6 +356,9 @@ static int fsa4480_probe(struct i2c_client *i2c,
 {
 	struct fsa4480_priv *fsa_priv;
 	int rc = 0;
+#ifdef CONFIG_MACH_XIAOMI_MUNCH
+	union power_supply_propval mode;
+#endif
 
 	fsa_priv = devm_kzalloc(&i2c->dev, sizeof(*fsa_priv),
 				GFP_KERNEL);
@@ -404,6 +407,19 @@ static int fsa4480_probe(struct i2c_client *i2c,
 
 	BLOCKING_INIT_NOTIFIER_HEAD(&fsa_priv->fsa4480_notifier);
 
+#ifdef CONFIG_MACH_XIAOMI_MUNCH
+	/* set usbc_mode initial value */
+	rc = power_supply_get_property(fsa_priv->usb_psy,
+			POWER_SUPPLY_PROP_TYPEC_MODE, &mode);
+	if (rc) {
+		dev_err(fsa_priv->dev, "%s: Uable to read USB TYPEC_MODE during probe: %d\n",
+				__func__, rc);
+	} else {
+		atomic_set(&(fsa_priv->usbc_mode), mode.intval);
+		dev_info(fsa_priv->dev, "%s: set usbc_mode to %d\n", __func__, fsa_priv->usbc_mode.counter);
+	}
+#endif
+
 	return 0;
 
 err_supply:
diff --git a/drivers/soc/qcom/service-locator.c b/drivers/soc/qcom/service-locator.c
index 3da5a978d9f6..60f2ced5ca18 100644
--- a/drivers/soc/qcom/service-locator.c
+++ b/drivers/soc/qcom/service-locator.c
@@ -25,7 +25,7 @@
 #define QMI_SERVREG_LOC_SERVER_INITIAL_TIMEOUT		2000
 #define QMI_SERVREG_LOC_SERVER_TIMEOUT			2000
 #define INITIAL_TIMEOUT					100000
-#define LOCATOR_SERVICE_TIMEOUT				300000
+#define LOCATOR_SERVICE_TIMEOUT				3000000
 
 #define LOCATOR_NOT_PRESENT	0
 #define LOCATOR_PRESENT		1
diff --git a/drivers/soc/qcom/socinfo.c b/drivers/soc/qcom/socinfo.c
index 4c5619593a6f..dddb1a8e4cc9 100644
--- a/drivers/soc/qcom/socinfo.c
+++ b/drivers/soc/qcom/socinfo.c
@@ -56,6 +56,18 @@ enum {
 	HW_PLATFORM_SBC = 24,
 	HW_PLATFORM_HDK = 31,
 	HW_PLATFORM_IDP = 34,
+	HW_PLATFORM_J1  = 36,
+	HW_PLATFORM_J11 = 37,
+	HW_PLATFORM_J1S = 41,
+	HW_PLATFORM_J3S = 42,
+	HW_PLATFORM_J2  = 43,
+	HW_PLATFORM_K11A = 44,
+	HW_PLATFORM_J2S = 45,
+	HW_PLATFORM_K81 = 46,
+	HW_PLATFORM_K81A = 47,
+	HW_PLATFORM_L3A = 48,
+    HW_PLATFORM_L11R = 50,
+	HW_PLATFORM_L81A = 51,
 	HW_PLATFORM_INVALID
 };
 
@@ -77,7 +89,19 @@ const char *hw_platform[] = {
 	[HW_PLATFORM_STP] = "STP",
 	[HW_PLATFORM_SBC] = "SBC",
 	[HW_PLATFORM_HDK] = "HDK",
-	[HW_PLATFORM_IDP] = "IDP"
+	[HW_PLATFORM_IDP] = "IDP",
+	[HW_PLATFORM_J2] = "UMI",
+	[HW_PLATFORM_J1] = "CMI",
+	[HW_PLATFORM_J11] = "LMI",
+	[HW_PLATFORM_J1S] = "CAS",
+	[HW_PLATFORM_J3S] = "APOLLO",
+	[HW_PLATFORM_K11A] = "ALIOTH",
+	[HW_PLATFORM_J2S] = "THYME",
+	[HW_PLATFORM_K81] = "ENUMA",
+	[HW_PLATFORM_K81A] = "ELISH",
+	[HW_PLATFORM_L3A] = "PSYCHE",
+    [HW_PLATFORM_L11R] = "MUNCH",
+    [HW_PLATFORM_L81A] = "DAGU",
 };
 
 enum {
@@ -321,7 +345,7 @@ static struct msm_soc_info cpu_of_id[] = {
 	[365] = {MSM_CPU_SDMMAGPIE, "SDMMAGPIE"},
 
 	/* kona ID */
-	[356] = {MSM_CPU_KONA, "KONA"},
+	[356] = {MSM_CPU_KONA, "SM8250"},
 	[455] = {MSM_CPU_KONA, "KONA"},
 	[496] = {MSM_CPU_KONA, "KONA"},
 
@@ -1814,6 +1838,86 @@ static void socinfo_select_format(void)
 	}
 }
 
+const char *product_name_get(void)
+{
+	char *product_name = NULL;
+	size_t size;
+	uint32_t hw_type;
+
+	hw_type = socinfo_get_platform_type();
+
+	product_name = qcom_smem_get(QCOM_SMEM_HOST_ANY, SMEM_ID_VENDOR1, &size);
+	if (IS_ERR_OR_NULL(product_name)) {
+		pr_warn("Can't find SMEM_ID_VENDOR1; falling back on dummy values.\n");
+		return hw_platform[hw_type];
+	}
+
+	return product_name;
+}
+
+EXPORT_SYMBOL(product_name_get);
+
+uint32_t get_hw_country_version(void)
+{
+	uint32_t version = socinfo_get_platform_version();
+	return (version & HW_COUNTRY_VERSION_MASK) >> HW_COUNTRY_VERSION_SHIFT;
+}
+
+EXPORT_SYMBOL(get_hw_country_version);
+
+uint32_t get_hw_version_platform(void)
+{
+	uint32_t hw_type = socinfo_get_platform_type();
+	if (hw_type == HW_PLATFORM_J2)
+		return HARDWARE_PLATFORM_UMI;
+	if (hw_type == HW_PLATFORM_J1)
+		return HARDWARE_PLATFORM_CMI;
+	if (hw_type == HW_PLATFORM_J11)
+		return HARDWARE_PLATFORM_LMI;
+	if (hw_type == HW_PLATFORM_J1S)
+		return HARDWARE_PLATFORM_CAS;
+	if (hw_type == HW_PLATFORM_J3S)
+		return HARDWARE_PLATFORM_APOLLO;
+	if (hw_type == HW_PLATFORM_K11A)
+		return HARDWARE_PLATFORM_ALIOTH;
+	if (hw_type == HW_PLATFORM_K81)
+		return HARDWARE_PLATFORM_ENUMA;
+	if (hw_type == HW_PLATFORM_K81A)
+		return HARDWARE_PLATFORM_ELISH;
+	if (hw_type == HW_PLATFORM_J2S)
+		return HARDWARE_PLATFORM_THYME;
+	if (hw_type == HW_PLATFORM_L3A)
+		return HARDWARE_PLATFORM_PSYCHE;
+	if (hw_type == HW_PLATFORM_L11R)
+		return HARDWARE_PLATFORM_MUNCH;
+	if (hw_type == HW_PLATFORM_L81A)
+		return HARDWARE_PLATFORM_DAGU;
+	else
+		return HARDWARE_PLATFORM_UNKNOWN;
+}
+EXPORT_SYMBOL(get_hw_version_platform);
+
+uint32_t get_hw_version_major(void)
+{
+	uint32_t version = socinfo_get_platform_version();
+	return (version & HW_MAJOR_VERSION_MASK) >> HW_MAJOR_VERSION_SHIFT;
+}
+EXPORT_SYMBOL(get_hw_version_major);
+
+uint32_t get_hw_version_minor(void)
+{
+	uint32_t version = socinfo_get_platform_version();
+	return (version & HW_MINOR_VERSION_MASK) >> HW_MINOR_VERSION_SHIFT;
+}
+EXPORT_SYMBOL(get_hw_version_minor);
+
+uint32_t get_hw_version_build(void)
+{
+	uint32_t version = socinfo_get_platform_version();
+	return (version & HW_BUILD_VERSION_MASK) >> HW_BUILD_VERSION_SHIFT;
+}
+EXPORT_SYMBOL(get_hw_version_build);
+
 int __init socinfo_init(void)
 {
 	static bool socinfo_init_done;
diff --git a/include/soc/qcom/socinfo.h b/include/soc/qcom/socinfo.h
index 60563a6ba627..81f6e5f79ea9 100644
--- a/include/soc/qcom/socinfo.h
+++ b/include/soc/qcom/socinfo.h
@@ -166,6 +166,7 @@
 
 #define SMEM_IMAGE_VERSION_TABLE	469
 #define SMEM_HW_SW_BUILD_ID		137
+#define SMEM_ID_VENDOR1                 135
 enum msm_cpu {
 	MSM_CPU_UNKNOWN = 0,
 	MSM_CPU_8960,
@@ -257,6 +258,47 @@ enum defective_cluster_type {
 	NUM_CLUSTERS_MAX,
 };
 
+#define HARDWARE_PLATFORM_UNKNOWN 0
+#define HARDWARE_PLATFORM_CMI  1
+#define HARDWARE_PLATFORM_UMI  2
+#define HARDWARE_PLATFORM_LMI  3
+#define HARDWARE_PLATFORM_CAS  7
+#define HARDWARE_PLATFORM_APOLLO  8
+#define HARDWARE_PLATFORM_ALIOTH  9
+#define HARDWARE_PLATFORM_THYME  10
+#define HARDWARE_PLATFORM_ENUMA  11
+#define HARDWARE_PLATFORM_ELISH  12
+#define HARDWARE_PLATFORM_PSYCHE  13
+#define HARDWARE_PLATFORM_MUNCH  15
+#define HARDWARE_PLATFORM_DAGU  16
+
+#define HW_MAJOR_VERSION_B  9
+#define HW_MINOR_VERSION_B  1
+
+
+#define HW_MAJOR_VERSION_SHIFT 16
+#define HW_MAJOR_VERSION_MASK  0xFFFF0000
+#define HW_MINOR_VERSION_SHIFT 0
+#define HW_MINOR_VERSION_MASK  0x0000FFFF
+#define HW_COUNTRY_VERSION_MASK 0xFFF00000
+#define HW_COUNTRY_VERSION_SHIFT 20
+#define HW_BUILD_VERSION_MASK 0x000F0000
+#define HW_BUILD_VERSION_SHIFT 16
+
+typedef enum {
+  CountryCN = 0,
+  CountryGlobal = 1,
+  CountryIndia = 2,
+  INVALID,
+} CountryType;
+
+uint32_t get_hw_version_platform(void);
+uint32_t get_hw_country_version(void);
+uint32_t get_hw_version_major(void);
+uint32_t get_hw_version_minor(void);
+uint32_t get_hw_version_build(void);
+const char *product_name_get(void);
+
 enum msm_cpu socinfo_get_msm_cpu(void);
 uint32_t socinfo_get_id(void);
 uint32_t socinfo_get_version(void);
-- 
2.48.1


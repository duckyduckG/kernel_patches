From 733a275a279ca53bb88d05d98b9457b92662164e Mon Sep 17 00:00:00 2001
From: Sebastiano Barezzi <barezzisebastiano@gmail.com>
Date: Tue, 15 Nov 2022 15:02:24 +0100
Subject: [PATCH 022/157] drivers: gpu: msm: Import Xiaomi changes

* From dagu-s-oss

Change-Id: Iae705abbfe166666dd571c4a653dc350bd2ad595
---
 drivers/gpu/msm/kgsl.c        | 45 ++++++++++++++++++++++++-----------
 drivers/gpu/msm/kgsl_device.h |  4 ++++
 2 files changed, 35 insertions(+), 14 deletions(-)

diff --git a/drivers/gpu/msm/kgsl.c b/drivers/gpu/msm/kgsl.c
index 8e6bb0341cb5..8d527e4f587d 100644
--- a/drivers/gpu/msm/kgsl.c
+++ b/drivers/gpu/msm/kgsl.c
@@ -12,6 +12,7 @@
 #include <linux/io.h>
 #include <linux/ion.h>
 #include <linux/mman.h>
+#include <linux/delay.h>
 #include <linux/module.h>
 #include <linux/msm-bus.h>
 #include <linux/of.h>
@@ -237,6 +238,7 @@ static struct kgsl_mem_entry *kgsl_mem_entry_create(void)
 		atomic_set(&entry->map_count, 0);
 	}
 
+	atomic_set(&entry->map_count, 0);
 	return entry;
 }
 
@@ -975,6 +977,10 @@ static struct kgsl_process_private *kgsl_process_private_new(
 		if (private->pid == cur_pid) {
 			if (!kgsl_process_private_get(private)) {
 				private = ERR_PTR(-EINVAL);
+			}else{
+				mutex_lock(&private->private_mutex);
+				private->fd_count++;
+				mutex_unlock(&private->private_mutex);
 			}
 			/*
 			 * We need to hold only one reference to the PID for
@@ -995,6 +1001,7 @@ static struct kgsl_process_private *kgsl_process_private_new(
 
 	kref_init(&private->refcount);
 
+	private->fd_count = 1;
 	private->pid = cur_pid;
 	get_task_comm(private->comm, current->group_leader);
 
@@ -1087,29 +1094,39 @@ static void kgsl_process_private_close(struct kgsl_device_private *dev_priv,
 	kgsl_process_private_put(private);
 }
 
-
-static struct kgsl_process_private *kgsl_process_private_open(
+static struct kgsl_process_private *_process_private_open(
 		struct kgsl_device *device)
 {
 	struct kgsl_process_private *private;
 
-	/*
-	 * Flush mem_workqueue to make sure that any lingering
-	 * structs (process pagetable etc) are released before
-	 * starting over again.
-	 */
-	flush_workqueue(kgsl_driver.mem_workqueue);
-
 	mutex_lock(&kgsl_driver.process_mutex);
 	private = kgsl_process_private_new(device);
+	mutex_unlock(&kgsl_driver.process_mutex);
 
-	if (IS_ERR(private))
-		goto done;
+	return private;
+}
 
-	private->fd_count++;
+static struct kgsl_process_private *kgsl_process_private_open(
+		struct kgsl_device *device)
+{
+	struct kgsl_process_private *private;
+	int i;
+
+	private = _process_private_open(device);
+
+	/*
+	 * If we get error and error is -EEXIST that means previous process
+	 * private destroy is triggered but didn't complete. Retry creating
+	 * process private after sometime to allow previous destroy to complete.
+	 */
+	for (i = 0; (PTR_ERR_OR_ZERO(private) == -EEXIST) && (i < 100); i++) {
+		usleep_range(10, 100);
+		private = _process_private_open(device);
+	}
+	if (i >= 100) {
+		pr_info("kgsl: kgsl_process_private_open times = %d\n", i);
+	}
 
-done:
-	mutex_unlock(&kgsl_driver.process_mutex);
 	return private;
 }
 
diff --git a/drivers/gpu/msm/kgsl_device.h b/drivers/gpu/msm/kgsl_device.h
index 55008e288e72..0c4ed61ba256 100644
--- a/drivers/gpu/msm/kgsl_device.h
+++ b/drivers/gpu/msm/kgsl_device.h
@@ -487,6 +487,10 @@ struct kgsl_process_private {
 	 * @cmd_count: The number of cmds that are active for the process
 	 */
 	atomic_t cmd_count;
+	/**
+	 * @private_mutex: Mutex lock to protect kgsl_process_private
+	 */
+	struct mutex private_mutex;
 };
 
 /**
-- 
2.48.1


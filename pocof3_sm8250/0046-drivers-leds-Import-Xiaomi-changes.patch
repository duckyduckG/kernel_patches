From 913c420af024f7a6b6ccbc25088eefea6672d8a7 Mon Sep 17 00:00:00 2001
From: Sebastiano Barezzi <barezzisebastiano@gmail.com>
Date: Tue, 15 Nov 2022 15:51:07 +0100
Subject: [PATCH 046/157] drivers: leds: Import Xiaomi changes

* From dagu-s-oss

Change-Id: I813073892d0afcb3650129486529ee884091a758
---
 drivers/leds/led-class.c          |  8 +++++---
 drivers/leds/leds-qpnp-flash-v2.c | 34 ++++++++++++++++++++++++++++++-
 2 files changed, 38 insertions(+), 4 deletions(-)

diff --git a/drivers/leds/led-class.c b/drivers/leds/led-class.c
index 77b7ea8291c5..80ea440d20bd 100644
--- a/drivers/leds/led-class.c
+++ b/drivers/leds/led-class.c
@@ -85,9 +85,11 @@ static ssize_t max_brightness_store(struct device *dev,
 	if (ret)
 		return ret;
 
-	led_cdev->max_brightness = state;
-	led_set_brightness(led_cdev, led_cdev->usr_brightness_req);
-
+	if (state <= LED_FULL) {
+		led_cdev->max_brightness = state;
+		if (led_cdev->usr_brightness_req > 0)
+			led_set_brightness(led_cdev, led_cdev->usr_brightness_req);
+	}
 	return size;
 }
 static DEVICE_ATTR_RW(max_brightness);
diff --git a/drivers/leds/leds-qpnp-flash-v2.c b/drivers/leds/leds-qpnp-flash-v2.c
index d00ce6d5108c..fc283865854d 100644
--- a/drivers/leds/leds-qpnp-flash-v2.c
+++ b/drivers/leds/leds-qpnp-flash-v2.c
@@ -372,6 +372,11 @@ static int max_ires_curr_ma_table[MAX_IRES_LEVELS] = {
 	FLASH_LED_IRES7P5_MAX_CURR_MA, FLASH_LED_IRES5P0_MAX_CURR_MA
 };
 
+static struct flash_node_data *g_torch_0;
+static struct flash_node_data *g_torch_1;
+static struct flash_switch_data *g_switch_0;
+static struct flash_switch_data *g_switch_1;
+
 static inline int get_current_reg_code(int target_curr_ma, int ires_ua)
 {
 	if (!ires_ua || !target_curr_ma || (target_curr_ma < (ires_ua / 1000)))
@@ -1920,6 +1925,9 @@ static void qpnp_flash_led_brightness_set(struct led_classdev *led_cdev,
 						strlen("led:torch"))) {
 		fnode = container_of(led_cdev, struct flash_node_data, cdev);
 		led = dev_get_drvdata(&fnode->pdev->dev);
+	} else if (!strncmp(led_cdev->name, "flashlight", strlen("flashlight"))) {
+		fnode = container_of(led_cdev, struct flash_node_data, cdev);
+		led = dev_get_drvdata(&fnode->pdev->dev);
 	}
 
 	if (!led) {
@@ -1933,7 +1941,17 @@ static void qpnp_flash_led_brightness_set(struct led_classdev *led_cdev,
 		if (rc < 0)
 			pr_err("Failed to set flash LED switch rc=%d\n", rc);
 	} else if (fnode) {
-		qpnp_flash_led_node_set(fnode, value);
+		if (!strncmp(led_cdev->name, "flashlight", strlen("flashlight"))) {
+			if (g_torch_0 && g_torch_1 && g_switch_0 && g_switch_1) {
+				pr_err("flash light fnode %d value %d", __LINE__, value);
+				qpnp_flash_led_node_set(g_torch_0, value);
+				qpnp_flash_led_node_set(g_torch_1, value);
+				qpnp_flash_led_switch_set(g_switch_0, value > 0);
+				qpnp_flash_led_switch_set(g_switch_1, value > 0);
+			}
+		} else {
+			qpnp_flash_led_node_set(fnode, value);
+		}
 	}
 
 	spin_unlock(&led->lock);
@@ -3094,6 +3112,8 @@ static int qpnp_flash_led_probe(struct platform_device *pdev)
 	struct device_node *node, *temp;
 	const char *temp_string;
 	int rc, i = 0, j = 0;
+	struct flash_node_data *fnode;
+	struct flash_switch_data *snode;
 
 	node = pdev->dev.of_node;
 	if (!node) {
@@ -3179,12 +3199,24 @@ static int qpnp_flash_led_probe(struct platform_device *pdev)
 					i, rc);
 				goto error_led_register;
 			}
+			fnode = &led->fnode[i];
+			if (!strcmp("led:torch_0", fnode->cdev.name)) {
+				g_torch_0 = fnode;
+			} else if (!strcmp("led:torch_1",  fnode->cdev.name)) {
+				g_torch_1 = fnode;
+			}
 			i++;
 		}
 
 		if (!strcmp("switch", temp_string)) {
 			rc = qpnp_flash_led_parse_and_register_switch(led,
 					&led->snode[j], temp);
+			snode = &led->snode[j];
+			if (!strcmp("led:switch_0", snode->cdev.name)) {
+				g_switch_0 = snode;
+			} else if (!strcmp("led:switch_1", snode->cdev.name)) {
+				g_switch_1 = snode;
+			}
 			if (rc < 0) {
 				pr_err("Unable to parse and register switch node, rc=%d\n",
 					rc);
-- 
2.48.1


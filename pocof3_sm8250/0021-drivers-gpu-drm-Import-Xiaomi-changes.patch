From 0a0f928bc654c49f79efa35e6120b0dd2d50e836 Mon Sep 17 00:00:00 2001
From: Sebastiano Barezzi <barezzisebastiano@gmail.com>
Date: Tue, 15 Nov 2022 15:02:00 +0100
Subject: [PATCH 021/157] drivers: gpu: drm: Import Xiaomi changes

* From dagu-s-oss

Change-Id: Idcdda6135bf5bbdee4682849b5ac3866d5869344
---
 drivers/gpu/drm/Makefile          |  3 +-
 drivers/gpu/drm/drm_bridge.c      | 12 +++++++
 drivers/gpu/drm/drm_mipi_dsi.c    | 23 +++++++++++++
 drivers/gpu/drm/drm_notifier_mi.c | 56 +++++++++++++++++++++++++++++++
 include/drm/drm_bridge.h          |  2 ++
 include/drm/drm_mipi_dsi.h        |  2 ++
 include/drm/drm_notifier_mi.h     | 55 ++++++++++++++++++++++++++++++
 7 files changed, 152 insertions(+), 1 deletion(-)
 create mode 100644 drivers/gpu/drm/drm_notifier_mi.c
 create mode 100644 include/drm/drm_notifier_mi.h

diff --git a/drivers/gpu/drm/Makefile b/drivers/gpu/drm/Makefile
index a6771cef85e2..d156336d8c96 100644
--- a/drivers/gpu/drm/Makefile
+++ b/drivers/gpu/drm/Makefile
@@ -18,7 +18,8 @@ drm-y       :=	drm_auth.o drm_bufs.o drm_cache.o \
 		drm_encoder.o drm_mode_object.o drm_property.o \
 		drm_plane.o drm_color_mgmt.o drm_print.o \
 		drm_dumb_buffers.o drm_mode_config.o drm_vblank.o \
-		drm_syncobj.o drm_lease.o drm_writeback.o drm_client.o
+		drm_syncobj.o drm_lease.o drm_writeback.o drm_client.o \
+		drm_notifier_mi.o
 
 drm-$(CONFIG_DRM_LIB_RANDOM) += lib/drm_random.o
 drm-$(CONFIG_DRM_VM) += drm_vm.o
diff --git a/drivers/gpu/drm/drm_bridge.c b/drivers/gpu/drm/drm_bridge.c
index 1638bfe9627c..a2495e9a6669 100644
--- a/drivers/gpu/drm/drm_bridge.c
+++ b/drivers/gpu/drm/drm_bridge.c
@@ -270,9 +270,15 @@ void drm_bridge_post_disable(struct drm_bridge *bridge)
 	if (!bridge)
 		return;
 
+	if (bridge->is_dsi_drm_bridge)
+		mutex_lock(&bridge->lock);
+
 	if (bridge->funcs->post_disable)
 		bridge->funcs->post_disable(bridge);
 
+	if (bridge->is_dsi_drm_bridge)
+		mutex_unlock(&bridge->lock);
+
 	drm_bridge_post_disable(bridge->next);
 }
 EXPORT_SYMBOL(drm_bridge_post_disable);
@@ -321,8 +327,14 @@ void drm_bridge_pre_enable(struct drm_bridge *bridge)
 
 	drm_bridge_pre_enable(bridge->next);
 
+	if (bridge->is_dsi_drm_bridge)
+		mutex_lock(&bridge->lock);
+
 	if (bridge->funcs->pre_enable)
 		bridge->funcs->pre_enable(bridge);
+
+	if (bridge->is_dsi_drm_bridge)
+		mutex_unlock(&bridge->lock);
 }
 EXPORT_SYMBOL(drm_bridge_pre_enable);
 
diff --git a/drivers/gpu/drm/drm_mipi_dsi.c b/drivers/gpu/drm/drm_mipi_dsi.c
index 14aae7184efd..b5de48e6e4f1 100644
--- a/drivers/gpu/drm/drm_mipi_dsi.c
+++ b/drivers/gpu/drm/drm_mipi_dsi.c
@@ -1071,6 +1071,29 @@ int mipi_dsi_dcs_set_display_brightness(struct mipi_dsi_device *dsi,
 }
 EXPORT_SYMBOL(mipi_dsi_dcs_set_display_brightness);
 
+/**
+ * mipi_dsi_dcs_set_display_brightness_bigendian() - sets the brightness value of the
+ * display with big endian, high byte to 1st parameter, low byte to 2nd parameter
+ * @dsi: DSI peripheral device
+ * @brightness: brightness value
+ *
+ * Return: 0 on success or a negative error code on failure.
+ */
+int mipi_dsi_dcs_set_display_brightness_big_endian(struct mipi_dsi_device *dsi,
+					u16 brightness)
+{
+	u8 payload[2] = { brightness >> 8, brightness & 0xff};
+	ssize_t err;
+
+	err = mipi_dsi_dcs_write(dsi, MIPI_DCS_SET_DISPLAY_BRIGHTNESS,
+				 payload, sizeof(payload));
+	if (err < 0)
+		return err;
+
+	return 0;
+}
+EXPORT_SYMBOL(mipi_dsi_dcs_set_display_brightness_big_endian);
+
 /**
  * mipi_dsi_dcs_get_display_brightness() - gets the current brightness value
  *    of the display
diff --git a/drivers/gpu/drm/drm_notifier_mi.c b/drivers/gpu/drm/drm_notifier_mi.c
new file mode 100644
index 000000000000..8ba417ae8a44
--- /dev/null
+++ b/drivers/gpu/drm/drm_notifier_mi.c
@@ -0,0 +1,56 @@
+/*
+ * Copyright (c) 2019, The Linux Foundation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#include <linux/notifier.h>
+
+static BLOCKING_NOTIFIER_HEAD(mi_drm_notifier_list);
+
+/**
+ * mi_drm_register_client - register a client notifier
+ * @nb: notifier block to callback on events
+ *
+ * This function registers a notifier callback function
+ * to msm_drm_notifier_list, which would be called when
+ * received unblank/power down event.
+ */
+int mi_drm_register_client(struct notifier_block *nb)
+{
+	return blocking_notifier_chain_register(&mi_drm_notifier_list, nb);
+}
+EXPORT_SYMBOL(mi_drm_register_client);
+
+/**
+ * mi_drm_unregister_client - unregister a client notifier
+ * @nb: notifier block to callback on events
+ *
+ * This function unregisters the callback function from
+ * msm_drm_notifier_list.
+ */
+int mi_drm_unregister_client(struct notifier_block *nb)
+{
+	return blocking_notifier_chain_unregister(&mi_drm_notifier_list, nb);
+}
+EXPORT_SYMBOL(mi_drm_unregister_client);
+
+/**
+ * mi_drm_notifier_call_chain - notify clients of drm_events
+ * @val: event MSM_DRM_EARLY_EVENT_BLANK or MSM_DRM_EVENT_BLANK
+ * @v: notifier data, inculde display id and display blank
+ *     event(unblank or power down).
+ */
+int mi_drm_notifier_call_chain(unsigned long val, void *v)
+{
+	return blocking_notifier_call_chain(&mi_drm_notifier_list, val, v);
+}
+EXPORT_SYMBOL(mi_drm_notifier_call_chain);
diff --git a/include/drm/drm_bridge.h b/include/drm/drm_bridge.h
index bd850747ce54..f697f4e9d628 100644
--- a/include/drm/drm_bridge.h
+++ b/include/drm/drm_bridge.h
@@ -294,6 +294,8 @@ struct drm_bridge {
 	const struct drm_bridge_funcs *funcs;
 	/** @driver_private: pointer to the bridge driver's internal context */
 	void *driver_private;
+	struct mutex lock;
+	bool is_dsi_drm_bridge;
 };
 
 void drm_bridge_add(struct drm_bridge *bridge);
diff --git a/include/drm/drm_mipi_dsi.h b/include/drm/drm_mipi_dsi.h
index 328f232f33ee..e1e5c235fb52 100644
--- a/include/drm/drm_mipi_dsi.h
+++ b/include/drm/drm_mipi_dsi.h
@@ -284,6 +284,8 @@ int mipi_dsi_dcs_set_pixel_format(struct mipi_dsi_device *dsi, u8 format);
 int mipi_dsi_dcs_set_tear_scanline(struct mipi_dsi_device *dsi, u16 scanline);
 int mipi_dsi_dcs_set_display_brightness(struct mipi_dsi_device *dsi,
 					u16 brightness);
+int mipi_dsi_dcs_set_display_brightness_big_endian(struct mipi_dsi_device *dsi,
+					u16 brightness);
 int mipi_dsi_dcs_get_display_brightness(struct mipi_dsi_device *dsi,
 					u16 *brightness);
 
diff --git a/include/drm/drm_notifier_mi.h b/include/drm/drm_notifier_mi.h
new file mode 100644
index 000000000000..7338aff6ae13
--- /dev/null
+++ b/include/drm/drm_notifier_mi.h
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) 2019, The Linux Foundation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#ifndef _DRM_NOTIFIER_MI_H_
+#define _DRM_NOTIFIER_MI_H_
+
+#include <linux/notifier.h>
+
+/* A hardware display blank change occurred */
+#define MI_DRM_EVENT_BLANK              0x01
+/* A hardware display blank early change occurred */
+#define MI_DRM_EARLY_EVENT_BLANK        0x02
+/* A hardware display blank more early change occured */
+#define MI_DRM_PRE_EVENT_BLANK          0x03
+
+enum msm_drm_display_id {
+	/* primary display */
+	MSM_DRM_PRIMARY_DISPLAY,
+	/* external display */
+	MSM_DRM_EXTERNAL_DISPLAY,
+	MSM_DRM_DISPLAY_MAX
+};
+
+enum {
+	/* panel: power on */
+	MI_DRM_BLANK_UNBLANK   = 0,
+	MI_DRM_BLANK_LP1       = 1,
+	MI_DRM_BLANK_LP2       = 2,
+	MI_DRM_BLANK_STANDBY   = 3,
+	MI_DRM_BLANK_SUSPEND   = 4,
+	/* panel: power off */
+	MI_DRM_BLANK_POWERDOWN = 5,
+};
+
+struct mi_drm_notifier {
+	enum msm_drm_display_id id;
+	void *data;
+};
+
+int mi_drm_register_client(struct notifier_block *nb);
+int mi_drm_unregister_client(struct notifier_block *nb);
+int mi_drm_notifier_call_chain(unsigned long val, void *v);
+
+#endif /*_DRM_NOTIFIER_MI_H*/
-- 
2.48.1


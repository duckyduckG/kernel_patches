From 3c29c1ab36fb650e6affd3fceae16ab68ea867ed Mon Sep 17 00:00:00 2001
From: Ritesh Kumar <riteshk@codeaurora.org>
Date: Wed, 21 Oct 2020 16:56:35 +0530
Subject: [PATCH 028/175] BACKPORT: disp: msm: dsi: invoke DSI soft reset when
 video engine is stuck

During ESD check failure, DSI video engine can get stuck
sending data from display engine. In use cases where GDSC
toggle does not happen like DP MST connected or secure video
playback, display does not recover back after ESD failure.
This change adds support to perform soft reset when DSI
video engine gets stuck.

Change-Id: I9cb31e6c71c4da171f9fe22fc3bee9175711831d
Signed-off-by: Ritesh Kumar <riteshk@codeaurora.org>
Signed-off-by: UtsavBalar1231 <utsavbalar1231@gmail.com>
Signed-off-by: NotZeetaa <rodrigo2005contente@gmail.com>
---
 techpack/display/msm/dsi/dsi_catalog.c     |  1 +
 techpack/display/msm/dsi/dsi_catalog.h     |  1 +
 techpack/display/msm/dsi/dsi_ctrl.c        | 14 +++++++++++---
 techpack/display/msm/dsi/dsi_ctrl_hw.h     |  7 +++++++
 techpack/display/msm/dsi/dsi_ctrl_hw_cmn.c | 15 +++++++++++++++
 5 files changed, 35 insertions(+), 3 deletions(-)

diff --git a/techpack/display/msm/dsi/dsi_catalog.c b/techpack/display/msm/dsi/dsi_catalog.c
index 2babe097e079..db1651438853 100644
--- a/techpack/display/msm/dsi/dsi_catalog.c
+++ b/techpack/display/msm/dsi/dsi_catalog.c
@@ -65,6 +65,7 @@ static void dsi_catalog_cmn_init(struct dsi_ctrl_hw *ctrl,
 	ctrl->ops.wait4dynamic_refresh_done =
 		dsi_ctrl_hw_cmn_wait4dynamic_refresh_done;
 	ctrl->ops.hs_req_sel = dsi_ctrl_hw_cmn_hs_req_sel;
+	ctrl->ops.vid_engine_busy = dsi_ctrl_hw_cmn_vid_engine_busy;
 
 	switch (version) {
 	case DSI_CTRL_VERSION_1_4:
diff --git a/techpack/display/msm/dsi/dsi_catalog.h b/techpack/display/msm/dsi/dsi_catalog.h
index ccaeebfc2303..723b379923bd 100644
--- a/techpack/display/msm/dsi/dsi_catalog.h
+++ b/techpack/display/msm/dsi/dsi_catalog.h
@@ -260,6 +260,7 @@ void dsi_phy_hw_v3_0_dyn_refresh_pipe_delay(struct dsi_phy_hw *phy,
 					    struct dsi_dyn_clk_delay *delay);
 
 int dsi_ctrl_hw_cmn_wait4dynamic_refresh_done(struct dsi_ctrl_hw *ctrl);
+bool dsi_ctrl_hw_cmn_vid_engine_busy(struct dsi_ctrl_hw *ctrl);
 int dsi_phy_hw_v3_0_cache_phy_timings(struct dsi_phy_per_lane_cfgs *timings,
 				      u32 *dst, u32 size);
 
diff --git a/techpack/display/msm/dsi/dsi_ctrl.c b/techpack/display/msm/dsi/dsi_ctrl.c
index ecfbc6e24923..0637ec23b978 100644
--- a/techpack/display/msm/dsi/dsi_ctrl.c
+++ b/techpack/display/msm/dsi/dsi_ctrl.c
@@ -3900,6 +3900,7 @@ int dsi_ctrl_set_vid_engine_state(struct dsi_ctrl *dsi_ctrl,
 {
 	int rc = 0;
 	bool on;
+	bool vid_eng_busy;
 
 	if (!dsi_ctrl || (state >= DSI_CTRL_ENGINE_MAX)) {
 		DSI_CTRL_ERR(dsi_ctrl, "Invalid params\n");
@@ -3917,12 +3918,19 @@ int dsi_ctrl_set_vid_engine_state(struct dsi_ctrl *dsi_ctrl,
 
 	on = (state == DSI_CTRL_ENGINE_ON) ? true : false;
 	dsi_ctrl->hw.ops.video_engine_en(&dsi_ctrl->hw, on);
+	vid_eng_busy = dsi_ctrl->hw.ops.vid_engine_busy(&dsi_ctrl->hw);
 
-	/* perform a reset when turning off video engine */
-	if (!on && dsi_ctrl->version < DSI_CTRL_VERSION_1_3)
+	/*
+	 * During ESD check failure, DSI video engine can get stuck
+	 * sending data from display engine. In use cases where GDSC
+	 * toggle does not happen like DP MST connected or secure video
+	 * playback, display does not recover back after ESD failure.
+	 * Perform a reset if video engine is stuck.
+	 */
+	if (!on && (dsi_ctrl->version < DSI_CTRL_VERSION_1_3 ||
+							vid_eng_busy))
 		dsi_ctrl->hw.ops.soft_reset(&dsi_ctrl->hw);
 
-	DSI_CTRL_DEBUG(dsi_ctrl, "Set video engine state = %d\n", state);
 	dsi_ctrl_update_state(dsi_ctrl, DSI_CTRL_OP_VID_ENGINE, state);
 error:
 	mutex_unlock(&dsi_ctrl->ctrl_lock);
diff --git a/techpack/display/msm/dsi/dsi_ctrl_hw.h b/techpack/display/msm/dsi/dsi_ctrl_hw.h
index c60650077c78..88babce92fb2 100644
--- a/techpack/display/msm/dsi/dsi_ctrl_hw.h
+++ b/techpack/display/msm/dsi/dsi_ctrl_hw.h
@@ -838,6 +838,13 @@ struct dsi_ctrl_hw_ops {
 	 * @ctrl:         Pointer to the controller host hardware.
 	 */
 	int (*wait4dynamic_refresh_done)(struct dsi_ctrl_hw *ctrl);
+
+	/**
+	 * hw.ops.vid_engine_busy() - Returns true if vid engine is busy
+	 * @ctrl:	Pointer to the controller host hardware.
+	 */
+	bool (*vid_engine_busy)(struct dsi_ctrl_hw *ctrl);
+
 	/**
 	 * hw.ops.hs_req_sel() - enable continuous clk support through phy
 	 * @ctrl:	Pointer to the controller host hardware.
diff --git a/techpack/display/msm/dsi/dsi_ctrl_hw_cmn.c b/techpack/display/msm/dsi/dsi_ctrl_hw_cmn.c
index 6a3bdf32756c..56ff96c44978 100644
--- a/techpack/display/msm/dsi/dsi_ctrl_hw_cmn.c
+++ b/techpack/display/msm/dsi/dsi_ctrl_hw_cmn.c
@@ -1646,3 +1646,18 @@ int dsi_ctrl_hw_cmn_wait4dynamic_refresh_done(struct dsi_ctrl_hw *ctrl)
 
 	return 0;
 }
+
+bool dsi_ctrl_hw_cmn_vid_engine_busy(struct dsi_ctrl_hw *ctrl)
+{
+	u32 reg = 0, video_engine_busy = BIT(3);
+	int rc;
+	u32 const sleep_us = 1000;
+	u32 const timeout_us = 50000;
+
+	rc = readl_poll_timeout(ctrl->base + DSI_STATUS, reg,
+			!(reg & video_engine_busy), sleep_us, timeout_us);
+	if (rc)
+		return true;
+
+	return false;
+}
-- 
2.48.1


From 2549e2c6be1292d30d3509b50b803142e0cc64fc Mon Sep 17 00:00:00 2001
From: Chinmay Sawarkar <chinmays@codeaurora.org>
Date: Wed, 28 Nov 2018 13:12:24 -0800
Subject: [PATCH 104/175] msm: vidc: Remove non secure firmware loading

Non secure loading of firmware is not supported, hence removing
the support.

CRs-Fixed: 2358497
Change-Id: I1da79824deefd48f42570051be352de7649f1855
Signed-off-by: Chinmay Sawarkar <chinmays@codeaurora.org>
---
 drivers/media/platform/msm/vidc/Makefile      |   1 -
 .../media/platform/msm/vidc/msm_v4l2_vidc.c   |   4 -
 .../platform/msm/vidc/msm_vidc_res_parse.c    |  40 +-
 .../platform/msm/vidc/msm_vidc_resources.h    |   1 -
 drivers/media/platform/msm/vidc/venus_boot.c  | 470 ------------------
 drivers/media/platform/msm/vidc/venus_boot.h  |  22 -
 drivers/media/platform/msm/vidc/venus_hfi.c   |   7 +-
 7 files changed, 9 insertions(+), 536 deletions(-)
 delete mode 100644 drivers/media/platform/msm/vidc/venus_boot.c
 delete mode 100644 drivers/media/platform/msm/vidc/venus_boot.h

diff --git a/drivers/media/platform/msm/vidc/Makefile b/drivers/media/platform/msm/vidc/Makefile
index 5cb9d0c8920c..0464ce7d4abc 100644
--- a/drivers/media/platform/msm/vidc/Makefile
+++ b/drivers/media/platform/msm/vidc/Makefile
@@ -15,7 +15,6 @@ msm-vidc-objs := msm_v4l2_vidc.o \
                                 hfi_response_handler.o \
                                 hfi_packetization.o \
                                 vidc_hfi.o \
-                                venus_boot.o \
                                 msm_vidc_clocks.o
 
 obj-$(CONFIG_MSM_VIDC_LEGACY_V4L2) := msm-vidc.o
diff --git a/drivers/media/platform/msm/vidc/msm_v4l2_vidc.c b/drivers/media/platform/msm/vidc/msm_v4l2_vidc.c
index 9a9b1b361a45..d05ce6bdf246 100644
--- a/drivers/media/platform/msm/vidc/msm_v4l2_vidc.c
+++ b/drivers/media/platform/msm/vidc/msm_v4l2_vidc.c
@@ -29,7 +29,6 @@
 #include "msm_vidc_internal.h"
 #include "msm_vidc_res_parse.h"
 #include "msm_vidc_resources.h"
-#include "venus_boot.h"
 #include "vidc_hfi_api.h"
 #include "msm_v4l2_private.h"
 #include "msm_vidc_clocks.h"
@@ -727,9 +726,6 @@ static int msm_vidc_remove(struct platform_device *pdev)
 		return -EINVAL;
 	}
 
-	if (core->resources.use_non_secure_pil)
-		venus_boot_deinit();
-
 	vidc_hfi_deinitialize(core->hfi_type, core->device);
 	if (core->resources.domain_cvp) {
 		device_remove_file(&core->vdev[MSM_VIDC_CVP].vdev.dev,
diff --git a/drivers/media/platform/msm/vidc/msm_vidc_res_parse.c b/drivers/media/platform/msm/vidc/msm_vidc_res_parse.c
index d0fec086730d..46e05840c27c 100644
--- a/drivers/media/platform/msm/vidc/msm_vidc_res_parse.c
+++ b/drivers/media/platform/msm/vidc/msm_vidc_res_parse.c
@@ -19,7 +19,6 @@
 #include "msm_vidc_debug.h"
 #include "msm_vidc_resources.h"
 #include "msm_vidc_res_parse.h"
-#include "venus_boot.h"
 #include "soc/qcom/secure_buffer.h"
 
 enum clock_properties {
@@ -980,17 +979,6 @@ int read_platform_resources_from_dt(
 		goto err_setup_legacy_cb;
 	}
 
-	res->use_non_secure_pil = of_property_read_bool(pdev->dev.of_node,
-			"qcom,use-non-secure-pil");
-
-	if (res->use_non_secure_pil || !is_iommu_present(res)) {
-		of_property_read_u32(pdev->dev.of_node, "qcom,fw-bias",
-				&firmware_base);
-		res->firmware_base = (phys_addr_t)firmware_base;
-		dprintk(VIDC_DBG,
-				"Using fw-bias : %pa", &res->firmware_base);
-	}
-
 	rc = msm_vidc_populate_cx_ipeak_context(res);
 	if (rc) {
 		dprintk(VIDC_ERR,
@@ -1359,30 +1347,12 @@ int read_context_bank_resources_from_dt(struct platform_device *pdev)
 		return -EINVAL;
 	}
 
-	if (of_property_read_bool(pdev->dev.of_node, "qcom,fw-context-bank")) {
-		if (core->resources.use_non_secure_pil) {
-			struct context_bank_info *cb;
-
-			cb = devm_kzalloc(&pdev->dev, sizeof(*cb), GFP_KERNEL);
-			if (!cb) {
-				dprintk(VIDC_ERR, "alloc venus cb failed\n");
-				return -ENOMEM;
-			}
+	rc = msm_vidc_populate_context_bank(&pdev->dev, core);
+	if (rc)
+		dprintk(VIDC_ERR, "Failed to probe context bank\n");
+	else
+		dprintk(VIDC_DBG, "Successfully probed context bank\n");
 
-			cb->dev = &pdev->dev;
-			rc = venus_boot_init(&core->resources, cb);
-			if (rc) {
-				dprintk(VIDC_ERR,
-				"Failed to init non-secure PIL %d\n", rc);
-			}
-		}
-	} else {
-		rc = msm_vidc_populate_context_bank(&pdev->dev, core);
-		if (rc)
-			dprintk(VIDC_ERR, "Failed to probe context bank\n");
-		else
-			dprintk(VIDC_DBG, "Successfully probed context bank\n");
-	}
 	return rc;
 }
 
diff --git a/drivers/media/platform/msm/vidc/msm_vidc_resources.h b/drivers/media/platform/msm/vidc/msm_vidc_resources.h
index 53d62fb91c45..c24dab8b9561 100644
--- a/drivers/media/platform/msm/vidc/msm_vidc_resources.h
+++ b/drivers/media/platform/msm/vidc/msm_vidc_resources.h
@@ -184,7 +184,6 @@ struct msm_vidc_platform_resources {
 	struct clock_set clock_set;
 	struct bus_set bus_set;
 	struct reset_set reset_set;
-	bool use_non_secure_pil;
 	bool sw_power_collapsible;
 	bool slave_side_cp;
 	struct list_head context_banks;
diff --git a/drivers/media/platform/msm/vidc/venus_boot.c b/drivers/media/platform/msm/vidc/venus_boot.c
deleted file mode 100644
index 7fe7d0e17881..000000000000
--- a/drivers/media/platform/msm/vidc/venus_boot.c
+++ /dev/null
@@ -1,470 +0,0 @@
-/* Copyright (c) 2014-2019, The Linux Foundation. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- */
-
-#define VIDC_DBG_LABEL "venus_boot"
-
-#include <asm/dma-iommu.h>
-#include <asm/page.h>
-#include <linux/clk.h>
-#include <linux/delay.h>
-#include <linux/dma-mapping.h>
-#include <linux/err.h>
-#include <linux/io.h>
-#include <linux/iommu.h>
-#include <linux/iopoll.h>
-#include <linux/kernel.h>
-#include <linux/module.h>
-#include <linux/of.h>
-#include <linux/platform_device.h>
-#include <linux/regulator/consumer.h>
-#include <linux/sizes.h>
-#include <linux/slab.h>
-#include <soc/qcom/subsystem_notif.h>
-#include <soc/qcom/subsystem_restart.h>
-#include "msm_vidc_debug.h"
-#include "vidc_hfi_io.h"
-#include "venus_boot.h"
-
-/* VENUS WRAPPER registers */
-#define VENUS_WRAPPER_SEC_CPA_START_ADDR			\
-				(VIDC_WRAPPER_BASE_OFFS + 0x1020)
-#define VENUS_WRAPPER_SEC_CPA_END_ADDR				\
-				(VIDC_WRAPPER_BASE_OFFS + 0x1024)
-#define VENUS_WRAPPER_SEC_FW_START_ADDR				\
-				(VIDC_WRAPPER_BASE_OFFS + 0x1028)
-#define VENUS_WRAPPER_SEC_FW_END_ADDR				\
-				(VIDC_WRAPPER_BASE_OFFS + 0x102C)
-
-#define VENUS_WRAPPER_A9SS_SW_RESET	(VIDC_WRAPPER_BASE_OFFS + 0x3000)
-
-/* VENUS VBIF registers */
-#define VENUS_VBIF_CLKON_FORCE_ON			BIT(0)
-
-#define VENUS_VBIF_ADDR_TRANS_EN  (VIDC_VBIF_BASE_OFFS + 0x1000)
-#define VENUS_VBIF_AT_OLD_BASE    (VIDC_VBIF_BASE_OFFS + 0x1004)
-#define VENUS_VBIF_AT_OLD_HIGH    (VIDC_VBIF_BASE_OFFS + 0x1008)
-#define VENUS_VBIF_AT_NEW_BASE    (VIDC_VBIF_BASE_OFFS + 0x1010)
-#define VENUS_VBIF_AT_NEW_HIGH    (VIDC_VBIF_BASE_OFFS + 0x1018)
-
-
-/* Poll interval in uS */
-#define POLL_INTERVAL_US				50
-
-#define VENUS_REGION_SIZE				0x00500000
-
-static struct {
-	struct msm_vidc_platform_resources *resources;
-	struct regulator *gdsc;
-	const char *reg_name;
-	void __iomem *reg_base;
-	struct device *iommu_ctx_bank_dev;
-	struct dma_iommu_mapping *mapping;
-	dma_addr_t fw_iova;
-	bool is_booted;
-	bool hw_ver_checked;
-	u32 fw_sz;
-	u32 hw_ver_major;
-	u32 hw_ver_minor;
-	void *venus_notif_hdle;
-} *venus_data = NULL;
-
-/* Get venus clocks and set rates for rate-settable clocks */
-static int venus_clock_setup(void)
-{
-	int i, rc = 0;
-	unsigned long rate;
-	struct msm_vidc_platform_resources *res = venus_data->resources;
-	struct clock_info *cl;
-
-	for (i = 0; i < res->clock_set.count; i++) {
-		cl = &res->clock_set.clock_tbl[i];
-		/* Make sure rate-settable clocks' rates are set */
-		if (!clk_get_rate(cl->clk) && cl->count) {
-			rate = clk_round_rate(cl->clk, 0);
-			rc = clk_set_rate(cl->clk, rate);
-			if (rc) {
-				dprintk(VIDC_ERR,
-						"Failed to set clock rate %lu %s: %d\n",
-						rate, cl->name, rc);
-				break;
-			}
-		}
-	}
-
-	return rc;
-}
-
-static int venus_clock_prepare_enable(void)
-{
-	int i, rc = 0;
-	struct msm_vidc_platform_resources *res = venus_data->resources;
-	struct clock_info *cl;
-
-	for (i = 0; i < res->clock_set.count; i++) {
-		cl = &res->clock_set.clock_tbl[i];
-		rc = clk_prepare_enable(cl->clk);
-		if (rc) {
-			dprintk(VIDC_ERR, "failed to enable %s\n", cl->name);
-			for (i--; i >= 0; i--) {
-				cl = &res->clock_set.clock_tbl[i];
-				clk_disable_unprepare(cl->clk);
-			}
-			return rc;
-		}
-	}
-
-	return rc;
-}
-
-static void venus_clock_disable_unprepare(void)
-{
-	struct msm_vidc_platform_resources *res = venus_data->resources;
-	struct clock_info *cl;
-	int i = res->clock_set.count;
-
-	for (i--; i >= 0; i--) {
-		cl = &res->clock_set.clock_tbl[i];
-		clk_disable_unprepare(cl->clk);
-	}
-}
-
-static int venus_setup_cb(struct device *dev,
-				u32 size)
-{
-	dma_addr_t va_start = 0x0;
-	size_t va_size = size;
-
-	venus_data->mapping = arm_iommu_create_mapping(
-		dev->bus, va_start, va_size);
-	if (IS_ERR_OR_NULL(venus_data->mapping)) {
-		dprintk(VIDC_ERR, "%s: failed to create mapping for %s\n",
-		__func__, dev_name(dev));
-		return -ENODEV;
-	}
-	dprintk(VIDC_DBG,
-		"%s Attached device %pK and created mapping %pK for %s\n",
-		__func__, dev, venus_data->mapping, dev_name(dev));
-	return 0;
-}
-
-static int pil_venus_mem_setup(size_t size)
-{
-	int rc = 0;
-
-	if (!venus_data->mapping) {
-		size = round_up(size, SZ_4K);
-		rc = venus_setup_cb(venus_data->iommu_ctx_bank_dev, size);
-		if (rc) {
-			dprintk(VIDC_ERR,
-				"%s: Failed to setup context bank for venus : %s\n",
-				__func__,
-				dev_name(venus_data->iommu_ctx_bank_dev));
-			return rc;
-		}
-		venus_data->fw_sz = size;
-	}
-
-	return rc;
-}
-
-static int pil_venus_auth_and_reset(void)
-{
-	int rc;
-
-	phys_addr_t fw_bias = venus_data->resources->firmware_base;
-	void __iomem *reg_base = venus_data->reg_base;
-	u32 ver;
-	bool iommu_present = is_iommu_present(venus_data->resources);
-	struct device *dev = venus_data->iommu_ctx_bank_dev;
-
-	if (!fw_bias) {
-		dprintk(VIDC_ERR, "FW bias is not valid\n");
-		return -EINVAL;
-	}
-	venus_data->fw_iova = (dma_addr_t)NULL;
-	/* Get Venus version number */
-	if (!venus_data->hw_ver_checked) {
-		ver = readl_relaxed(reg_base + VIDC_WRAPPER_HW_VERSION);
-		venus_data->hw_ver_minor = (ver & 0x0FFF0000) >> 16;
-		venus_data->hw_ver_major = (ver & 0xF0000000) >> 28;
-		venus_data->hw_ver_checked = 1;
-	}
-
-	if (iommu_present) {
-		u32 cpa_start_addr, cpa_end_addr, fw_start_addr, fw_end_addr;
-		/* Get the cpa and fw start/end addr */
-		cpa_start_addr =
-			VENUS_WRAPPER_SEC_CPA_START_ADDR;
-		cpa_end_addr =
-			VENUS_WRAPPER_SEC_CPA_END_ADDR;
-		fw_start_addr =
-			VENUS_WRAPPER_SEC_FW_START_ADDR;
-		fw_end_addr =
-			VENUS_WRAPPER_SEC_FW_END_ADDR;
-
-		/* Program CPA start and end address */
-		writel_relaxed(0, reg_base + cpa_start_addr);
-		writel_relaxed(venus_data->fw_sz, reg_base + cpa_end_addr);
-
-		/* Program FW start and end address */
-		writel_relaxed(0, reg_base + fw_start_addr);
-		writel_relaxed(venus_data->fw_sz, reg_base + fw_end_addr);
-	} else {
-		rc = regulator_enable(venus_data->gdsc);
-		if (rc) {
-			dprintk(VIDC_ERR, "GDSC enable failed\n");
-			goto err;
-		}
-
-		rc = venus_clock_prepare_enable();
-		if (rc) {
-			dprintk(VIDC_ERR, "Clock prepare and enable failed\n");
-			regulator_disable(venus_data->gdsc);
-			goto err;
-		}
-
-		writel_relaxed(0, reg_base + VENUS_VBIF_AT_OLD_BASE);
-		writel_relaxed(VENUS_REGION_SIZE,
-				reg_base + VENUS_VBIF_AT_OLD_HIGH);
-		writel_relaxed(fw_bias, reg_base + VENUS_VBIF_AT_NEW_BASE);
-		writel_relaxed(fw_bias + VENUS_REGION_SIZE,
-				reg_base + VENUS_VBIF_AT_NEW_HIGH);
-		writel_relaxed(0x7F007F, reg_base + VENUS_VBIF_ADDR_TRANS_EN);
-		venus_clock_disable_unprepare();
-		regulator_disable(venus_data->gdsc);
-	}
-	/* Make sure all register writes are committed. */
-	mb();
-
-	/*
-	 * Need to wait 10 cycles of internal clocks before bringing ARM9
-	 * out of reset.
-	 */
-	udelay(1);
-
-	if (iommu_present) {
-		phys_addr_t pa = fw_bias;
-
-		rc = arm_iommu_attach_device(dev, venus_data->mapping);
-		if (rc) {
-			dprintk(VIDC_ERR,
-				"Failed to attach iommu for %s : %d\n",
-				dev_name(dev), rc);
-			goto release_mapping;
-		}
-
-		dprintk(VIDC_DBG, "Attached and created mapping for %s\n",
-				dev_name(dev));
-
-		/* Map virtual addr space 0 - fw_sz to fw phys addr space */
-		rc = iommu_map(venus_data->mapping->domain,
-			venus_data->fw_iova, pa, venus_data->fw_sz,
-			IOMMU_READ|IOMMU_WRITE|IOMMU_PRIV);
-		if (!rc) {
-			dprintk(VIDC_DBG,
-				"%s - Successfully mapped and performed test translation!\n",
-				dev_name(dev));
-		}
-
-		if (rc || (venus_data->fw_iova != 0)) {
-			dprintk(VIDC_ERR, "%s - Failed to setup IOMMU\n",
-					dev_name(dev));
-			goto err_iommu_map;
-		}
-	}
-	/* Bring Arm9 out of reset */
-	writel_relaxed(0, reg_base + VENUS_WRAPPER_A9SS_SW_RESET);
-
-	venus_data->is_booted = 1;
-	return 0;
-
-err_iommu_map:
-	if (iommu_present)
-		arm_iommu_detach_device(dev);
-release_mapping:
-	if (iommu_present)
-		arm_iommu_release_mapping(venus_data->mapping);
-err:
-	return rc;
-}
-
-static int pil_venus_shutdown(void)
-{
-	void __iomem *reg_base = venus_data->reg_base;
-	u32 reg;
-	int rc;
-
-	if (!venus_data->is_booted)
-		return 0;
-
-	/* Assert the reset to ARM9 */
-	reg = readl_relaxed(reg_base + VENUS_WRAPPER_A9SS_SW_RESET);
-	reg |= BIT(4);
-	writel_relaxed(reg, reg_base + VENUS_WRAPPER_A9SS_SW_RESET);
-
-	/* Make sure reset is asserted before the mapping is removed */
-	mb();
-
-	if (is_iommu_present(venus_data->resources)) {
-		iommu_unmap(venus_data->mapping->domain, venus_data->fw_iova,
-			venus_data->fw_sz);
-		arm_iommu_detach_device(venus_data->iommu_ctx_bank_dev);
-	}
-	/*
-	 * Force the VBIF clk to be on to avoid AXI bridge halt ack failure
-	 * for certain Venus version.
-	 */
-	if (venus_data->hw_ver_major == 0x1 &&
-				(venus_data->hw_ver_minor == 0x2 ||
-				venus_data->hw_ver_minor == 0x3)) {
-		reg = readl_relaxed(reg_base + VIDC_VENUS_VBIF_CLK_ON);
-		reg |= VENUS_VBIF_CLKON_FORCE_ON;
-		writel_relaxed(reg, reg_base + VIDC_VENUS_VBIF_CLK_ON);
-	}
-
-	/* Halt AXI and AXI OCMEM VBIF Access */
-	reg = readl_relaxed(reg_base + VENUS_VBIF_AXI_HALT_CTRL0);
-	reg |= VENUS_VBIF_AXI_HALT_CTRL0_HALT_REQ;
-	writel_relaxed(reg, reg_base + VENUS_VBIF_AXI_HALT_CTRL0);
-
-	/* Request for AXI bus port halt */
-	rc = readl_poll_timeout(reg_base + VENUS_VBIF_AXI_HALT_CTRL1,
-			reg, reg & VENUS_VBIF_AXI_HALT_CTRL1_HALT_ACK,
-			POLL_INTERVAL_US,
-			VENUS_VBIF_AXI_HALT_ACK_TIMEOUT_US);
-	if (rc)
-		dprintk(VIDC_ERR, "Port halt timeout\n");
-
-	venus_data->is_booted = 0;
-
-	return 0;
-}
-
-static int venus_notifier_cb(struct notifier_block *this, unsigned long code,
-							void *ss_handle)
-{
-	struct notif_data *data = (struct notif_data *)ss_handle;
-	static bool venus_data_set;
-	int ret;
-
-	if (!data->no_auth)
-		return NOTIFY_DONE;
-
-	if (!venus_data_set) {
-		ret = venus_clock_setup();
-		if (ret)
-			return ret;
-
-		ret = of_property_read_string(data->pdev->dev.of_node,
-				"qcom,proxy-reg-names", &venus_data->reg_name);
-		if (ret)
-			return ret;
-
-		venus_data->gdsc = devm_regulator_get(
-				&data->pdev->dev, venus_data->reg_name);
-		if (IS_ERR(venus_data->gdsc)) {
-			dprintk(VIDC_ERR, "Failed to get Venus GDSC\n");
-			return -ENODEV;
-		}
-
-		venus_data_set = true;
-	}
-
-	if (code != SUBSYS_AFTER_POWERUP && code != SUBSYS_AFTER_SHUTDOWN)
-		return NOTIFY_DONE;
-
-	ret = regulator_enable(venus_data->gdsc);
-	if (ret) {
-		dprintk(VIDC_ERR, "GDSC enable failed\n");
-		return ret;
-	}
-
-	ret = venus_clock_prepare_enable();
-	if (ret) {
-		dprintk(VIDC_ERR, "Clock prepare and enable failed\n");
-		goto err_clks;
-	}
-
-	if (code == SUBSYS_AFTER_POWERUP) {
-		if (is_iommu_present(venus_data->resources))
-			pil_venus_mem_setup(VENUS_REGION_SIZE);
-		pil_venus_auth_and_reset();
-	} else if (code == SUBSYS_AFTER_SHUTDOWN)
-		pil_venus_shutdown();
-
-	venus_clock_disable_unprepare();
-	regulator_disable(venus_data->gdsc);
-
-	return NOTIFY_DONE;
-err_clks:
-	regulator_disable(venus_data->gdsc);
-	return ret;
-}
-
-static struct notifier_block venus_notifier = {
-	.notifier_call = venus_notifier_cb,
-};
-
-int venus_boot_init(struct msm_vidc_platform_resources *res,
-			struct context_bank_info *cb)
-{
-	int rc = 0;
-
-	if (!res || !cb) {
-		dprintk(VIDC_ERR, "Invalid platform resource handle\n");
-		return -EINVAL;
-	}
-	venus_data = kzalloc(sizeof(*venus_data), GFP_KERNEL);
-	if (!venus_data)
-		return -ENOMEM;
-
-	venus_data->resources = res;
-	venus_data->iommu_ctx_bank_dev = cb->dev;
-	if (!venus_data->iommu_ctx_bank_dev) {
-		dprintk(VIDC_ERR, "Invalid venus context bank device\n");
-		return -ENODEV;
-	}
-	venus_data->reg_base = ioremap_nocache(res->register_base,
-			(unsigned long)res->register_size);
-	dprintk(VIDC_DBG, "venus reg: base %llx size %x\n",
-		 res->register_base, res->register_size);
-	if (!venus_data->reg_base) {
-		dprintk(VIDC_ERR,
-				"could not map reg addr %pa of size %d\n",
-				&res->register_base, res->register_size);
-		rc = -ENOMEM;
-		goto err_ioremap_fail;
-	}
-
-	venus_data->venus_notif_hdle = subsys_notif_register_notifier("venus",
-							&venus_notifier);
-	if (IS_ERR(venus_data->venus_notif_hdle)) {
-		dprintk(VIDC_ERR, "register event notification failed\n");
-		rc = PTR_ERR(venus_data->venus_notif_hdle);
-		goto err_subsys_notif;
-	}
-
-	return rc;
-
-err_subsys_notif:
-err_ioremap_fail:
-	kfree(venus_data);
-	return rc;
-}
-
-void venus_boot_deinit(void)
-{
-	venus_data->resources = NULL;
-	subsys_notif_unregister_notifier(venus_data->venus_notif_hdle,
-			&venus_notifier);
-	kfree(venus_data);
-}
diff --git a/drivers/media/platform/msm/vidc/venus_boot.h b/drivers/media/platform/msm/vidc/venus_boot.h
deleted file mode 100644
index da4e77291f51..000000000000
--- a/drivers/media/platform/msm/vidc/venus_boot.h
+++ /dev/null
@@ -1,22 +0,0 @@
-/* Copyright (c) 2014, 2017 The Linux Foundation. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 and
- * only version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- */
-
-#ifndef __VENUS_BOOT_H__
-#define __VENUS_BOOT_H__
-#include "msm_vidc_resources.h"
-
-int venus_boot_init(struct msm_vidc_platform_resources *res,
-		struct context_bank_info *cb);
-void venus_boot_deinit(void);
-
-#endif /* __VENUS_BOOT_H__ */
diff --git a/drivers/media/platform/msm/vidc/venus_hfi.c b/drivers/media/platform/msm/vidc/venus_hfi.c
index 6e34d0e69db9..763c5e25f3a7 100644
--- a/drivers/media/platform/msm/vidc/venus_hfi.c
+++ b/drivers/media/platform/msm/vidc/venus_hfi.c
@@ -4918,8 +4918,7 @@ static int __load_fw(struct venus_hfi_device *device)
 		goto fail_venus_power_on;
 	}
 
-	if ((!device->res->use_non_secure_pil && !device->res->firmware_base)
-			|| device->res->use_non_secure_pil) {
+	if (!device->res->firmware_base) {
 		if (!device->resources.fw.cookie)
 			device->resources.fw.cookie =
 				subsystem_get_with_fwname("venus",
@@ -4931,9 +4930,11 @@ static int __load_fw(struct venus_hfi_device *device)
 			rc = -ENOMEM;
 			goto fail_load_fw;
 		}
+	} else {
+		dprintk(VIDC_ERR, "Firmware base must be 0\n");
 	}
 
-	if (!device->res->use_non_secure_pil && !device->res->firmware_base) {
+	if (!device->res->firmware_base) {
 		rc = __protect_cp_mem(device);
 		if (rc) {
 			dprintk(VIDC_ERR, "Failed to protect memory\n");
-- 
2.48.1


From adb97cc2f759afca5c0d67321c530223213c2472 Mon Sep 17 00:00:00 2001
From: duckyduckG <duckyduckg65@gmail.com>
Date: Sat, 11 Jan 2025 16:03:37 +0500
Subject: [PATCH 161/175] init: Add CONFIG_INITRAMFS_IGNORE_SKIP_FLAG *
 Ignoring an ignore flag, yikes * Also replace skip_initramf with
 want_initramf (omitting last letter for Magisk since it binary patches that
 out of kernel, I'm not even sure why we're supporting that mess)

Co-authored-by: Erfan Abdi <erfangplus@gmail.com>
Change-Id: Ifdf726f128bc66bf860bbb71024f94f56879710f
---
 fs/proc/cmdline.c | 25 +++++++++++++++++++++++++
 init/initramfs.c  |  2 +-
 usr/Kconfig       |  9 +++++++++
 3 files changed, 35 insertions(+), 1 deletion(-)

diff --git a/fs/proc/cmdline.c b/fs/proc/cmdline.c
index fa762c5fbcb2..f90cc32444ce 100644
--- a/fs/proc/cmdline.c
+++ b/fs/proc/cmdline.c
@@ -3,16 +3,41 @@
 #include <linux/init.h>
 #include <linux/proc_fs.h>
 #include <linux/seq_file.h>
+#ifdef CONFIG_INITRAMFS_IGNORE_SKIP_FLAG
+#include <asm/setup.h>
+#endif
+#ifdef CONFIG_INITRAMFS_IGNORE_SKIP_FLAG
+#define INITRAMFS_STR_FIND "skip_initramf"
+#define INITRAMFS_STR_REPLACE "want_initramf"
+#define INITRAMFS_STR_LEN (sizeof(INITRAMFS_STR_FIND) - 1)
+static char proc_command_line[COMMAND_LINE_SIZE];
+static void proc_command_line_init(void) {
+	char *offset_addr;
+	strcpy(proc_command_line, saved_command_line);
+	offset_addr = strstr(proc_command_line, INITRAMFS_STR_FIND);
+	if (!offset_addr)
+		return;
+	memcpy(offset_addr, INITRAMFS_STR_REPLACE, INITRAMFS_STR_LEN);
+}
+#endif
 
 static int cmdline_proc_show(struct seq_file *m, void *v)
 {
+#ifdef CONFIG_INITRAMFS_IGNORE_SKIP_FLAG
+	seq_puts(m, proc_command_line);
+#else
 	seq_puts(m, saved_command_line);
+#endif
 	seq_putc(m, '\n');
 	return 0;
 }
 
 static int __init proc_cmdline_init(void)
 {
+#ifdef CONFIG_INITRAMFS_IGNORE_SKIP_FLAG
+	proc_command_line_init();
+#endif
+
 	proc_create_single("cmdline", 0, NULL, cmdline_proc_show);
 	return 0;
 }
diff --git a/init/initramfs.c b/init/initramfs.c
index e6a800a7c12a..c2ef3486c9b8 100644
--- a/init/initramfs.c
+++ b/init/initramfs.c
@@ -624,7 +624,7 @@ static int __init skip_initramfs_param(char *str)
 {
 	if (*str)
 		return 0;
-	do_skip_initramfs = 1;
+	do_skip_initramfs = !IS_ENABLED(CONFIG_INITRAMFS_IGNORE_SKIP_FLAG);
 	return 1;
 }
 __setup("skip_initramfs", skip_initramfs_param);
diff --git a/usr/Kconfig b/usr/Kconfig
index 8b4826de1189..e57ebaace3c9 100644
--- a/usr/Kconfig
+++ b/usr/Kconfig
@@ -32,6 +32,15 @@ config INITRAMFS_FORCE
 	  and is useful if you cannot or don't want to change the image
 	  your bootloader passes to the kernel.
 
+config INITRAMFS_IGNORE_SKIP_FLAG
+	bool "Force initramfs even when skip_initramfs is set"
+	default n
+	help
+	  Ignore skip_initramfs cmdline flag.
+	  This should only be used if you have no control over cmdline
+	  passed by your bootloader yet you can't use CMDLINE_FORCE.
+	  If unsure say N.
+
 config INITRAMFS_ROOT_UID
 	int "User ID to map to 0 (user root)"
 	depends on INITRAMFS_SOURCE!=""
-- 
2.48.1


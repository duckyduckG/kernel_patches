From 5826ec0a9528ce29b77f8a82865ac8916065159d Mon Sep 17 00:00:00 2001
From: MrArtemSid <artem.sid.key@gmail.com>
Date: Tue, 21 Nov 2023 22:41:23 +0400
Subject: [PATCH 145/175] drivers: thermal: Import some mi845 changes

From dipper-q-oss
---
 drivers/thermal/of-thermal.c   |  53 +++++++++++++
 drivers/thermal/thermal_core.c | 132 +++++++++++++++++++++++++++++++++
 drivers/thermal/thermal_core.h |  12 +++
 3 files changed, 197 insertions(+)

diff --git a/drivers/thermal/of-thermal.c b/drivers/thermal/of-thermal.c
index 2981cae4013b..cdedd77a8e37 100644
--- a/drivers/thermal/of-thermal.c
+++ b/drivers/thermal/of-thermal.c
@@ -123,6 +123,8 @@ struct virtual_sensor {
 	int                        avg_denominator;
 };
 
+struct thermal_message *tm;
+
 static int of_thermal_aggregate_trip_types(struct thermal_zone_device *tz,
 		unsigned int trip_type_mask, int *low, int *high);
 
@@ -1559,3 +1561,54 @@ void of_thermal_destroy_zones(void)
 	}
 	of_node_put(np);
 }
+
+int __init of_parse_thermal_message(void)
+{
+	struct device_node *np;
+	int ret = 0;
+
+	np = of_find_node_by_name(NULL, "thermal-message");
+	if (!np) {
+		pr_err("unable to find thermal message\n");
+		ret = -EINVAL;
+		goto out;
+	}
+
+	tm = kzalloc(sizeof(struct thermal_message), GFP_KERNEL);
+	if (!tm) {
+		pr_err("unable alloc memory for thermal message\n");
+		ret = -ENOMEM;
+		goto out;
+	}
+
+	ret = of_property_read_string(np, "thermal,batt-array-size", &tm->batt_array_size);
+	if (ret && (ret != -EINVAL)) {
+		pr_err("Unable to read batt array size\n");
+		tm->batt_array_size = NULL;
+	}
+
+	ret = of_property_read_string(np, "thermal,batt-level-screen-on", &tm->batt_level_screen_on);
+	if (ret && (ret != -EINVAL)) {
+		pr_err("Unable to read batt message screen on\n");
+		tm->batt_level_screen_on = NULL;
+	}
+
+	ret = of_property_read_string(np, "thermal,batt-level-screen-off", &tm->batt_level_screen_off);
+	if (ret && (ret != -EINVAL)) {
+		pr_err("Unable to read batt message screen off\n");
+		tm->batt_level_screen_off = NULL;
+	}
+out:
+	if (!ret && tm && tm->batt_level_screen_on && tm->batt_level_screen_off)
+		tm->message_ok = true;
+
+	return ret;
+}
+
+void free_thermal_message(void)
+{
+	if (tm) {
+		kfree(tm);
+		tm = NULL;
+	}
+}
diff --git a/drivers/thermal/thermal_core.c b/drivers/thermal/thermal_core.c
index aab2dca801c7..5ffc3b392e89 100644
--- a/drivers/thermal/thermal_core.c
+++ b/drivers/thermal/thermal_core.c
@@ -53,6 +53,10 @@ static struct thermal_governor *def_governor;
 
 static struct workqueue_struct *thermal_passive_wq;
 
+static atomic_t switch_mode = ATOMIC_INIT(-1);
+static atomic_t temp_state = ATOMIC_INIT(0);
+static char boost_buf[128];
+
 /*
  * Governor section: set of functions to handle thermal governors
  *
@@ -1014,6 +1018,8 @@ static void bind_cdev(struct thermal_cooling_device *cdev)
 	mutex_unlock(&thermal_list_lock);
 }
 
+static struct device thermal_message_dev;
+
 /**
  * __thermal_cooling_device_register() - register a new thermal cooling device
  * @np:		a pointer to a device tree node.
@@ -1661,6 +1667,120 @@ static struct notifier_block thermal_pm_nb = {
 	.notifier_call = thermal_pm_notify,
 };
 
+static ssize_t
+thermal_message_of_batt_show(struct device *dev,
+				      struct device_attribute *attr, char *buf)
+{
+	if (!tm || !tm->message_ok)
+		return -EINVAL;
+
+	return snprintf(buf, PAGE_SIZE, "array_size %s\nscreen_on %s\nscreen_off %s\n",
+			tm->batt_array_size, tm->batt_level_screen_on, tm->batt_level_screen_off);
+}
+
+static DEVICE_ATTR(batt_message, 0644,
+		   thermal_message_of_batt_show, NULL);
+
+static ssize_t
+thermal_sconfig_show(struct device *dev,
+				      struct device_attribute *attr, char *buf)
+{
+	return snprintf(buf, PAGE_SIZE, "%d\n", atomic_read(&switch_mode));
+}
+
+static ssize_t
+thermal_sconfig_store(struct device *dev,
+				      struct device_attribute *attr, const char *buf, size_t len)
+{
+	int val = -1;
+
+	val = simple_strtol(buf, NULL, 10);
+
+	atomic_set(&switch_mode, val);
+
+	return len;
+}
+
+static DEVICE_ATTR(sconfig, 0664,
+		   thermal_sconfig_show, thermal_sconfig_store);
+
+static ssize_t
+thermal_boost_show(struct device *dev,
+				      struct device_attribute *attr, char *buf)
+{
+	return snprintf(buf, PAGE_SIZE, boost_buf);
+}
+
+static ssize_t
+thermal_boost_store(struct device *dev,
+				      struct device_attribute *attr, const char *buf, size_t len)
+{
+	int ret;
+	ret = snprintf(boost_buf, PAGE_SIZE, buf);
+	return len;
+}
+
+static DEVICE_ATTR(boost, 0644,
+		   thermal_boost_show, thermal_boost_store);
+
+static ssize_t
+thermal_temp_state_show(struct device *dev,
+				      struct device_attribute *attr, char *buf)
+{
+	return snprintf(buf, PAGE_SIZE, "%d\n", atomic_read(&temp_state));
+}
+
+static ssize_t
+thermal_temp_state_store(struct device *dev,
+				      struct device_attribute *attr, const char *buf, size_t len)
+{
+	int val = -1;
+
+	val = simple_strtol(buf, NULL, 10);
+
+	atomic_set(&temp_state, val);
+
+	return len;
+}
+
+static DEVICE_ATTR(temp_state, 0664,
+		   thermal_temp_state_show, thermal_temp_state_store);
+
+static int create_thermal_message_node(void) {
+	int ret = 0;
+
+	thermal_message_dev.class = &thermal_class;
+
+	dev_set_name(&thermal_message_dev, "thermal_message");
+	ret = device_register(&thermal_message_dev);
+	if (!ret) {
+		ret = sysfs_create_file(&thermal_message_dev.kobj, &dev_attr_batt_message.attr);
+		if (ret < 0)
+			pr_warn("Thermal: create batt message node failed\n");
+		ret = sysfs_create_file(&thermal_message_dev.kobj, &dev_attr_sconfig.attr);
+		if (ret < 0)
+			pr_warn("Thermal: create sconfig node failed\n");
+
+		ret = sysfs_create_file(&thermal_message_dev.kobj, &dev_attr_boost.attr);
+		if (ret < 0)
+			pr_warn("Thermal: create boost node failed\n");
+
+		ret = sysfs_create_file(&thermal_message_dev.kobj, &dev_attr_temp_state.attr);
+		if (ret < 0)
+			pr_warn("Thermal: create temp state node failed\n");
+	}
+
+	return ret;
+}
+
+static void destroy_thermal_message_node(void) {
+	sysfs_remove_file(&thermal_message_dev.kobj, &dev_attr_temp_state.attr);
+	sysfs_remove_file(&thermal_message_dev.kobj, &dev_attr_sconfig.attr);
+	sysfs_remove_file(&thermal_message_dev.kobj, &dev_attr_boost.attr);
+	sysfs_remove_file(&thermal_message_dev.kobj, &dev_attr_batt_message.attr);
+	device_unregister(&thermal_message_dev);
+}
+
 static int __init thermal_init(void)
 {
 	int result;
@@ -1692,6 +1812,16 @@ static int __init thermal_init(void)
 		pr_warn("Thermal: Can not register suspend notifier, return %d\n",
 			result);
 
+	result = of_parse_thermal_message();
+	if (result)
+		pr_warn("Thermal: Can not get thermal message, return %d\n",
+			result);
+
+	result = create_thermal_message_node();
+	if (result)
+		pr_warn("Thermal: create thermal message node failed, return %d\n",
+			result);
+
 	return 0;
 
 exit_zone_parse:
@@ -1711,10 +1841,12 @@ static int __init thermal_init(void)
 
 static void thermal_exit(void)
 {
+	free_thermal_message();
 	unregister_pm_notifier(&thermal_pm_nb);
 	of_thermal_destroy_zones();
 	destroy_workqueue(thermal_passive_wq);
 	genetlink_exit();
+	destroy_thermal_message_node();
 	class_unregister(&thermal_class);
 	thermal_unregister_governors();
 	ida_destroy(&thermal_tz_ida);
diff --git a/drivers/thermal/thermal_core.h b/drivers/thermal/thermal_core.h
index 490426ae05df..319d5fa3a51a 100644
--- a/drivers/thermal/thermal_core.h
+++ b/drivers/thermal/thermal_core.h
@@ -3,6 +3,7 @@
  *  thermal_core.h
  *
  *  Copyright (C) 2012  Intel Corp
+ *  Copyright (C) 2019 XiaoMi, Inc.
  *  Author: Durgadoss R <durgadoss.r@intel.com>
  */
 
@@ -49,6 +50,15 @@ struct thermal_instance {
 #define to_cooling_device(_dev)	\
 	container_of(_dev, struct thermal_cooling_device, device)
 
+struct thermal_message {
+	bool message_ok;
+	const char *batt_array_size;
+	const char *batt_level_screen_on;
+	const char *batt_level_screen_off;
+};
+
+extern struct thermal_message *tm;
+
 int thermal_register_governor(struct thermal_governor *);
 void thermal_unregister_governor(struct thermal_governor *);
 void thermal_zone_device_rebind_exception(struct thermal_zone_device *,
@@ -150,6 +160,8 @@ int of_thermal_aggregate_trip(struct thermal_zone_device *tz,
 void of_thermal_handle_trip(struct thermal_zone_device *tz);
 void of_thermal_handle_trip_temp(struct thermal_zone_device *tz,
 					int trip_temp);
+int of_parse_thermal_message(void);
+void free_thermal_message(void);
 #else
 static inline int of_parse_thermal_zones(void) { return 0; }
 static inline void of_thermal_destroy_zones(void) { }
-- 
2.48.1


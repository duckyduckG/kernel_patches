From 3b00c6529716eff22d40fc5818a20254d8b8b46a Mon Sep 17 00:00:00 2001
From: Deepak Katragadda <dkatraga@codeaurora.org>
Date: Fri, 11 Nov 2016 11:37:10 -0800
Subject: [PATCH 081/175] clk: qcom: gdsc-regulator: Add the
 qcom,poll-cfg-gdscr flag

The default behavior of the GDSC enable/disable sequence is
to poll the status bits of either the actual GDSCR or the
corresponding HW_CTRL registers.
On targets which have support for a CFG_GDSCR register, the
status bits might not show the correct state of the GDSC,
especially in the disable sequence, where the status bit
will be cleared even before the core is completely power
collapsed. On targets with this issue, poll the power on/off
bits in the CFG_GDSCR register instead to correctly determine
the GDSC state.

Change-Id: If41f3f1cea25c001938f28bbb94af3310860d60f
Signed-off-by: Deepak Katragadda <dkatraga@codeaurora.org>
Signed-off-by: Pavel Dubrova <pashadubrova@gmail.com>
---
 drivers/clk/qcom/gdsc-regulator.c | 75 +++++++++++++++++++++++++++----
 1 file changed, 66 insertions(+), 9 deletions(-)

diff --git a/drivers/clk/qcom/gdsc-regulator.c b/drivers/clk/qcom/gdsc-regulator.c
index ee8b6a2cde89..8e174a13b87a 100644
--- a/drivers/clk/qcom/gdsc-regulator.c
+++ b/drivers/clk/qcom/gdsc-regulator.c
@@ -34,6 +34,10 @@
 #define HW_CONTROL_MASK		BIT(1)
 #define SW_COLLAPSE_MASK	BIT(0)
 
+/* CFG_GDSCR */
+#define GDSC_POWER_UP_COMPLETE		BIT(16)
+#define GDSC_POWER_DOWN_COMPLETE	BIT(15)
+
 /* Domain Address */
 #define GMEM_CLAMP_IO_MASK	BIT(0)
 #define GMEM_RESET_MASK         BIT(4)
@@ -43,6 +47,7 @@
 
 /* Register Offset */
 #define REG_OFFSET		0x0
+#define CFG_GDSCR_OFFSET	0x4
 
 /* Timeout Delay */
 #define TIMEOUT_US		100
@@ -72,6 +77,7 @@ struct gdsc {
 	bool			allow_clear;
 	bool			reset_aon;
 	bool			is_bus_enabled;
+	bool			poll_cfg_gdscr;
 	int			clock_count;
 	int			reset_count;
 	int			root_clk_idx;
@@ -138,6 +144,31 @@ static int poll_gdsc_status(struct gdsc *sc, enum gdscr_status status)
 	return -ETIMEDOUT;
 }
 
+static int poll_cfg_gdsc_status(struct gdsc *sc, enum gdscr_status status)
+{
+	struct regmap *regmap = sc->regmap;
+	int count = sc->gds_timeout;
+	u32 val;
+
+	for (; count > 0; count--) {
+		regmap_read(regmap, CFG_GDSCR_OFFSET, &val);
+
+		switch (status) {
+		case ENABLED:
+			if (val & GDSC_POWER_UP_COMPLETE)
+				return 0;
+			break;
+		case DISABLED:
+			if (val & GDSC_POWER_DOWN_COMPLETE)
+				return 0;
+			break;
+		}
+		udelay(1);
+	}
+
+	return -ETIMEDOUT;
+}
+
 static int gdsc_is_enabled(struct regulator_dev *rdev)
 {
 	struct gdsc *sc = rdev_get_drvdata(rdev);
@@ -211,7 +242,7 @@ static int gdsc_is_enabled(struct regulator_dev *rdev)
 static int gdsc_enable(struct regulator_dev *rdev)
 {
 	struct gdsc *sc = rdev_get_drvdata(rdev);
-	uint32_t regval, hw_ctrl_regval = 0x0;
+	uint32_t regval, cfg_regval, hw_ctrl_regval = 0x0;
 	int i, ret = 0;
 
 	if (sc->skip_disable_before_enable)
@@ -305,7 +336,10 @@ static int gdsc_enable(struct regulator_dev *rdev)
 		gdsc_mb(sc);
 		udelay(1);
 
-		ret = poll_gdsc_status(sc, ENABLED);
+		if (sc->poll_cfg_gdscr)
+			ret = poll_cfg_gdsc_status(sc, ENABLED);
+		else
+			ret = poll_gdsc_status(sc, ENABLED);
 		if (ret) {
 			regmap_read(sc->regmap, REG_OFFSET, &regval);
 
@@ -333,10 +367,21 @@ static int gdsc_enable(struct regulator_dev *rdev)
 					regval);
 				udelay(sc->gds_timeout);
 
-				regmap_read(sc->regmap, REG_OFFSET, &regval);
-				dev_err(&rdev->dev, "%s final state: 0x%x (%d us after timeout)\n",
-					sc->rdesc.name, regval,
-					sc->gds_timeout);
+				if (sc->poll_cfg_gdscr) {
+					regmap_read(sc->regmap, REG_OFFSET,
+							&regval);
+					regmap_read(sc->regmap,
+						CFG_GDSCR_OFFSET, &cfg_regval);
+					dev_err(&rdev->dev, "%s final state: gdscr - 0x%x, cfg_gdscr - 0x%x (%d us after timeout)\n",
+						sc->rdesc.name, regval,
+						cfg_regval, sc->gds_timeout);
+				} else {
+					regmap_read(sc->regmap, REG_OFFSET,
+							&regval);
+					dev_err(&rdev->dev, "%s final state: 0x%x (%d us after timeout)\n",
+						sc->rdesc.name, regval,
+						sc->gds_timeout);
+				}
 				goto end;
 			}
 		}
@@ -425,7 +470,10 @@ static int gdsc_disable(struct regulator_dev *rdev)
 			 */
 			udelay(TIMEOUT_US);
 		} else {
-			ret = poll_gdsc_status(sc, DISABLED);
+			if (sc->poll_cfg_gdscr)
+				ret = poll_cfg_gdsc_status(sc, DISABLED);
+			else
+				ret = poll_gdsc_status(sc, DISABLED);
 			if (ret)
 				dev_err(&rdev->dev, "%s disable timed out: 0x%x\n",
 					sc->rdesc.name, regval);
@@ -587,7 +635,10 @@ static int gdsc_set_mode(struct regulator_dev *rdev, unsigned int mode)
 		 * starts to use SW mode.
 		 */
 		if (sc->is_gdsc_enabled) {
-			ret = poll_gdsc_status(sc, ENABLED);
+			if (sc->poll_cfg_gdscr)
+				ret = poll_cfg_gdsc_status(sc, ENABLED);
+			else
+				ret = poll_gdsc_status(sc, ENABLED);
 			if (ret)
 				dev_err(&rdev->dev, "%s enable timed out\n",
 					sc->rdesc.name);
@@ -687,6 +738,9 @@ static int gdsc_parse_dt_data(struct gdsc *sc, struct device *dev,
 			return PTR_ERR(sc->hw_ctrl);
 	}
 
+	sc->poll_cfg_gdscr = of_property_read_bool(dev->of_node,
+						"qcom,poll-cfg-gdscr");
+
 	sc->gds_timeout = TIMEOUT_US;
 	of_property_read_u32(dev->of_node, "qcom,gds-timeout",
 				&sc->gds_timeout);
@@ -914,7 +968,10 @@ static int gdsc_probe(struct platform_device *pdev)
 		regval &= ~SW_COLLAPSE_MASK;
 		regmap_write(sc->regmap, REG_OFFSET, regval);
 
-		ret = poll_gdsc_status(sc, ENABLED);
+		if (sc->poll_cfg_gdscr)
+			ret = poll_cfg_gdsc_status(sc, ENABLED);
+		else
+			ret = poll_gdsc_status(sc, ENABLED);
 		if (ret) {
 			dev_err(&pdev->dev, "%s enable timed out: 0x%x\n",
 				sc->rdesc.name, regval);
-- 
2.48.1


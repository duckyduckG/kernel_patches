From 404922b3fdc879984fc094abcc0387b67ba76389 Mon Sep 17 00:00:00 2001
From: Danny Lin <danny@kdrag0n.dev>
Date: Thu, 11 Jun 2020 18:47:55 -0700
Subject: [PATCH 130/175] ion: Add compatibility with legacy Ion v1 ABI

Kernel 4.12 revamped the Ion ABI [1], rendering it incompatible with blobs
made to work with the old "v1" ABI. This commit implements the old ABI by
mapping legacy Ion handles to dma-buf fds and adding simple implementations
of the ioctls that no longer exist. The alloc ioctl's arguments struct has
changed and none of the other ioctls conflict, so this implementation is
compatible with blobs using both the v1 and v2 ABIs.

dma-buf allocations are automatically freed when no references to the fd
remain, so the FREE ioctl doesn't need to do anything meaningful. However,
newer blobs using libion will call FREE with a handle of 0 to check which
ABI the kernel implements and decide whether to use v1 or v2. Because we
want to use v2 as much as possible for efficiency, FREE needs to return
-ENOTTY to pretend that it doesn't exist if it detects that the call was
made by libion for probing the ABI, so it is not truly a no-op.

Support for cache maintenance operations and 32-bit clients will be added
later.

[1] https://source.android.com/devices/architecture/kernel/ion_abi_changes

Co-authored-by: dianlujitao <dianlujitao@lineageos.org>
Signed-off-by: Danny Lin <danny@kdrag0n.dev>
Signed-off-by: Subhajeet Muhuri <subhajeet.muhuri@gmail.com>
---
 drivers/staging/android/ion/Kconfig      |   6 +
 drivers/staging/android/ion/Makefile     |   3 +
 drivers/staging/android/ion/compat_ion.c | 159 +++++++++++++++++++++++
 drivers/staging/android/ion/compat_ion.h |  29 +++++
 drivers/staging/android/ion/ion-ioctl.c  |  48 +++++++
 drivers/staging/android/ion/ion.c        |   5 +
 drivers/staging/android/ion/ion_legacy.h | 101 ++++++++++++++
 7 files changed, 351 insertions(+)
 create mode 100644 drivers/staging/android/ion/compat_ion.c
 create mode 100644 drivers/staging/android/ion/compat_ion.h
 create mode 100644 drivers/staging/android/ion/ion_legacy.h

diff --git a/drivers/staging/android/ion/Kconfig b/drivers/staging/android/ion/Kconfig
index 813407f45741..d7d8a38c3765 100644
--- a/drivers/staging/android/ion/Kconfig
+++ b/drivers/staging/android/ion/Kconfig
@@ -11,6 +11,12 @@ menuconfig ION
 	  If you're not using Android its probably safe to
 	  say N here.
 
+config ION_LEGACY
+	bool "Legacy ion"
+	depends on ION
+	help
+	  Choose this option to enable the legacy ion. If in doubt, say N.
+
 config ION_SYSTEM_HEAP
 	bool "Ion system heap"
 	depends on ION
diff --git a/drivers/staging/android/ion/Makefile b/drivers/staging/android/ion/Makefile
index dc638f080d7f..2b6d1525cea3 100644
--- a/drivers/staging/android/ion/Makefile
+++ b/drivers/staging/android/ion/Makefile
@@ -5,3 +5,6 @@ obj-$(CONFIG_ION) +=	ion.o ion-ioctl.o ion_heap.o \
 			ion_system_secure_heap.o ion_cma_heap.o \
 			ion_secure_util.o ion_cma_secure_heap.o msm/
 
+ifdef CONFIG_COMPAT
+obj-$(CONFIG_ION_LEGACY) += compat_ion.o
+endif
diff --git a/drivers/staging/android/ion/compat_ion.c b/drivers/staging/android/ion/compat_ion.c
new file mode 100644
index 000000000000..057810447f42
--- /dev/null
+++ b/drivers/staging/android/ion/compat_ion.c
@@ -0,0 +1,159 @@
+/*
+ * drivers/staging/android/ion/compat_ion.c
+ *
+ * Copyright (C) 2013 Google, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#include <linux/compat.h>
+#include <linux/fs.h>
+#include <linux/uaccess.h>
+
+#include "ion.h"
+#include "compat_ion.h"
+#include "ion_legacy.h"
+
+/* See drivers/staging/android/uapi/ion.h for the definition of these structs */
+struct compat_ion_old_allocation_data {
+	compat_size_t len;
+	compat_size_t align;
+	compat_uint_t heap_id_mask;
+	compat_uint_t flags;
+	compat_int_t handle;
+};
+
+struct compat_ion_handle_data {
+	compat_int_t handle;
+};
+
+#define COMPAT_ION_IOC_ALLOC	_IOWR(ION_IOC_MAGIC, 0, \
+				      struct compat_ion_old_allocation_data)
+#define COMPAT_ION_IOC_FREE	_IOWR(ION_IOC_MAGIC, 1, \
+				      struct compat_ion_handle_data)
+
+static int compat_get_ion_allocation_data(
+			struct compat_ion_old_allocation_data __user *data32,
+			struct ion_old_allocation_data __user *data)
+{
+	compat_size_t s;
+	compat_uint_t u;
+	compat_int_t i;
+	int err;
+
+	err = get_user(s, &data32->len);
+	err |= put_user(s, &data->len);
+	err |= get_user(s, &data32->align);
+	err |= put_user(s, &data->align);
+	err |= get_user(u, &data32->heap_id_mask);
+	err |= put_user(u, &data->heap_id_mask);
+	err |= get_user(u, &data32->flags);
+	err |= put_user(u, &data->flags);
+	err |= get_user(i, &data32->handle);
+	err |= put_user(i, &data->handle);
+
+	return err;
+}
+
+static int compat_get_ion_handle_data(
+			struct compat_ion_handle_data __user *data32,
+			struct ion_handle_data __user *data)
+{
+	compat_int_t i;
+	int err;
+
+	err = get_user(i, &data32->handle);
+	err |= put_user(i, &data->handle);
+
+	return err;
+}
+
+static int compat_put_ion_allocation_data(
+			struct compat_ion_old_allocation_data __user *data32,
+			struct ion_old_allocation_data __user *data)
+{
+	compat_size_t s;
+	compat_uint_t u;
+	compat_int_t i;
+	int err;
+
+	err = get_user(s, &data->len);
+	err |= put_user(s, &data32->len);
+	err |= get_user(s, &data->align);
+	err |= put_user(s, &data32->align);
+	err |= get_user(u, &data->heap_id_mask);
+	err |= put_user(u, &data32->heap_id_mask);
+	err |= get_user(u, &data->flags);
+	err |= put_user(u, &data32->flags);
+	err |= get_user(i, &data->handle);
+	err |= put_user(i, &data32->handle);
+
+	return err;
+}
+
+long compat_ion_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
+{
+	long ret;
+
+	if (!filp->f_op->unlocked_ioctl)
+		return -ENOTTY;
+
+	switch (cmd) {
+	case COMPAT_ION_IOC_ALLOC:
+	{
+		struct compat_ion_old_allocation_data __user *data32;
+		struct ion_old_allocation_data __user *data;
+		int err;
+
+		data32 = compat_ptr(arg);
+		data = compat_alloc_user_space(sizeof(*data));
+		if (!data)
+			return -EFAULT;
+
+		err = compat_get_ion_allocation_data(data32, data);
+		if (err)
+			return err;
+		ret = filp->f_op->unlocked_ioctl(filp, ION_OLD_IOC_ALLOC,
+							(unsigned long)data);
+		err = compat_put_ion_allocation_data(data32, data);
+		return ret ? ret : err;
+	}
+	case COMPAT_ION_IOC_FREE:
+	{
+		struct compat_ion_handle_data __user *data32;
+		struct ion_handle_data __user *data;
+		int err;
+
+		data32 = compat_ptr(arg);
+		data = compat_alloc_user_space(sizeof(*data));
+		if (!data)
+			return -EFAULT;
+
+		err = compat_get_ion_handle_data(data32, data);
+		if (err)
+			return err;
+
+		return filp->f_op->unlocked_ioctl(filp, ION_IOC_FREE,
+							(unsigned long)data);
+	}
+	case ION_IOC_SHARE:
+	case ION_IOC_MAP:
+	case ION_IOC_IMPORT:
+	case ION_IOC_ALLOC:
+	case ION_IOC_HEAP_QUERY:
+	case ION_IOC_PREFETCH:
+	case ION_IOC_DRAIN:
+		return filp->f_op->unlocked_ioctl(filp, cmd,
+						(unsigned long)compat_ptr(arg));
+	default:
+		return -ENOIOCTLCMD;
+	}
+}
diff --git a/drivers/staging/android/ion/compat_ion.h b/drivers/staging/android/ion/compat_ion.h
new file mode 100644
index 000000000000..9da8f917670b
--- /dev/null
+++ b/drivers/staging/android/ion/compat_ion.h
@@ -0,0 +1,29 @@
+/*
+ * drivers/staging/android/ion/compat_ion.h
+ *
+ * Copyright (C) 2013 Google, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#ifndef _LINUX_COMPAT_ION_H
+#define _LINUX_COMPAT_ION_H
+
+#if IS_ENABLED(CONFIG_COMPAT)
+
+long compat_ion_ioctl(struct file *filp, unsigned int cmd, unsigned long arg);
+
+#else
+
+#define compat_ion_ioctl  NULL
+
+#endif /* CONFIG_COMPAT */
+#endif /* _LINUX_COMPAT_ION_H */
diff --git a/drivers/staging/android/ion/ion-ioctl.c b/drivers/staging/android/ion/ion-ioctl.c
index cba8f04df9f3..acf483fe3154 100644
--- a/drivers/staging/android/ion/ion-ioctl.c
+++ b/drivers/staging/android/ion/ion-ioctl.c
@@ -11,10 +11,19 @@
 #include "ion.h"
 #include "ion_system_secure_heap.h"
 
+#ifdef CONFIG_ION_LEGACY
+#include "ion_legacy.h"
+#endif
+
 union ion_ioctl_arg {
 	struct ion_allocation_data allocation;
 	struct ion_heap_query query;
 	struct ion_prefetch_data prefetch_data;
+#ifdef CONFIG_ION_LEGACY
+	struct ion_fd_data fd;
+	struct ion_old_allocation_data old_allocation;
+	struct ion_handle_data handle;
+#endif
 };
 
 static int validate_ioctl_arg(unsigned int cmd, union ion_ioctl_arg *arg)
@@ -37,6 +46,10 @@ static int validate_ioctl_arg(unsigned int cmd, union ion_ioctl_arg *arg)
 static unsigned int ion_ioctl_dir(unsigned int cmd)
 {
 	switch (cmd) {
+#ifdef CONFIG_ION_LEGACY
+	case ION_IOC_FREE:
+		return _IOC_WRITE;
+#endif
 	default:
 		return _IOC_DIR(cmd);
 	}
@@ -115,6 +128,41 @@ long ion_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
 			return ret;
 		break;
 	}
+#ifdef CONFIG_ION_LEGACY
+	case ION_OLD_IOC_ALLOC:
+	{
+		int fd;
+
+		fd = ion_alloc_fd(data.old_allocation.len,
+				  data.old_allocation.heap_id_mask,
+				  data.old_allocation.flags);
+		if (fd < 0)
+			return fd;
+
+		data.old_allocation.handle = fd;
+
+		break;
+	}
+	case ION_IOC_FREE:
+		/*
+		 * libion passes 0 as the handle to check for this ioctl's
+		 * existence and expects -ENOTTY on kernel 4.12+ as an indicator
+		 * of having a new ION ABI. We want to use new ION as much as
+		 * possible, so pretend that this ioctl doesn't exist when
+		 * libion checks for it.
+		 */
+		if (!data.handle.handle)
+			ret = -ENOTTY;
+
+		break;
+	case ION_IOC_SHARE:
+	case ION_IOC_MAP:
+		data.fd.fd = data.fd.handle;
+		break;
+	case ION_IOC_IMPORT:
+		data.fd.handle = data.fd.fd;
+		break;
+#endif
 	default:
 		return -ENOTTY;
 	}
diff --git a/drivers/staging/android/ion/ion.c b/drivers/staging/android/ion/ion.c
index 0a0fc1623909..ea984030f534 100644
--- a/drivers/staging/android/ion/ion.c
+++ b/drivers/staging/android/ion/ion.c
@@ -37,6 +37,7 @@
 
 #include "ion.h"
 #include "ion_secure_util.h"
+#include "compat_ion.h"
 
 static struct ion_device *internal_dev;
 static atomic_long_t total_heap_bytes;
@@ -1195,8 +1196,12 @@ static const struct file_operations ion_fops = {
 	.owner          = THIS_MODULE,
 	.unlocked_ioctl = ion_ioctl,
 #ifdef CONFIG_COMPAT
+#ifdef CONFIG_ION_LEGACY
+	.compat_ioctl	= compat_ion_ioctl,
+#else
 	.compat_ioctl	= ion_ioctl,
 #endif
+#endif
 };
 
 static int ion_debug_heap_show(struct seq_file *s, void *unused)
diff --git a/drivers/staging/android/ion/ion_legacy.h b/drivers/staging/android/ion/ion_legacy.h
new file mode 100644
index 000000000000..a4b78963e83b
--- /dev/null
+++ b/drivers/staging/android/ion/ion_legacy.h
@@ -0,0 +1,101 @@
+#ifndef _ION_LEGACY_H
+#define _ION_LEGACY_H
+
+#ifdef CONFIG_ION_LEGACY
+
+#include "../uapi/ion.h"
+
+typedef int ion_user_handle_t;
+
+/**
+ * struct ion_old_allocation_data - metadata passed from legacy (pre-4.12 kernel)
+ * 				       userspace for allocations
+ * @len:		size of the allocation
+ * @align:		required alignment of the allocation
+ * @heap_id_mask:	mask of heap ids to allocate from
+ * @flags:		flags passed to heap
+ * @handle:		pointer that will be populated with a cookie to use to
+ *			refer to this allocation
+ *
+ * Provided by userspace as an argument to the ioctl
+ */
+struct ion_old_allocation_data {
+	size_t len;
+	size_t align;
+	unsigned int heap_id_mask;
+	unsigned int flags;
+	ion_user_handle_t handle;
+};
+
+/**
+ * struct ion_fd_data - metadata passed to/from userspace for a handle/fd pair
+ * @handle:	a handle
+ * @fd:		a file descriptor representing that handle
+ *
+ * For ION_IOC_SHARE or ION_IOC_MAP userspace populates the handle field with
+ * the handle returned from ion alloc, and the kernel returns the file
+ * descriptor to share or map in the fd field.  For ION_IOC_IMPORT, userspace
+ * provides the file descriptor and the kernel returns the handle.
+ */
+struct ion_fd_data {
+	ion_user_handle_t handle;
+	int fd;
+};
+
+/**
+ * struct ion_handle_data - a handle passed to/from the kernel
+ * @handle:	a handle
+ */
+struct ion_handle_data {
+	ion_user_handle_t handle;
+};
+
+/**
+ * DOC: ION_OLD_IOC_ALLOC - allocate memory (pre-4.12 version)
+ *
+ * Takes an ion_old_allocation_data struct and returns it with the handle field
+ * populated with the opaque handle for the allocation.
+ */
+#define ION_OLD_IOC_ALLOC	_IOWR(ION_IOC_MAGIC, 0, \
+				      struct ion_old_allocation_data)
+
+/**
+ * DOC: ION_IOC_FREE - free memory
+ *
+ * Takes an ion_handle_data struct and frees the handle.
+ */
+#define ION_IOC_FREE		_IOWR(ION_IOC_MAGIC, 1, struct ion_handle_data)
+
+/**
+ * DOC: ION_IOC_MAP - get a file descriptor to mmap
+ *
+ * Takes an ion_fd_data struct with the handle field populated with a valid
+ * opaque handle.  Returns the struct with the fd field set to a file
+ * descriptor open in the current address space.  This file descriptor
+ * can then be used as an argument to mmap.
+ */
+#define ION_IOC_MAP		_IOWR(ION_IOC_MAGIC, 2, struct ion_fd_data)
+
+/**
+ * DOC: ION_IOC_SHARE - creates a file descriptor to use to share an allocation
+ *
+ * Takes an ion_fd_data struct with the handle field populated with a valid
+ * opaque handle.  Returns the struct with the fd field set to a file
+ * descriptor open in the current address space.  This file descriptor
+ * can then be passed to another process.  The corresponding opaque handle can
+ * be retrieved via ION_IOC_IMPORT.
+ */
+#define ION_IOC_SHARE		_IOWR(ION_IOC_MAGIC, 4, struct ion_fd_data)
+
+/**
+ * DOC: ION_IOC_IMPORT - imports a shared file descriptor
+ *
+ * Takes an ion_fd_data struct with the fd field populated with a valid file
+ * descriptor obtained from ION_IOC_SHARE and returns the struct with the handle
+ * filed set to the corresponding opaque handle.
+ */
+#define ION_IOC_IMPORT		_IOWR(ION_IOC_MAGIC, 5, struct ion_fd_data)
+
+#endif /* CONFIG_ION_LEGACY */
+
+#endif /* _ION_LEGACY_H */
-- 
2.48.1


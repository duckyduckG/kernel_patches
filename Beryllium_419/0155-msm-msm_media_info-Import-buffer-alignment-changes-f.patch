From 94bd57af845682ca7a31fee9028668443e23656c Mon Sep 17 00:00:00 2001
From: Edwin Moquete <edwinmmoquete@gmail.com>
Date: Sun, 30 Jul 2023 13:07:00 +0000
Subject: [PATCH 155/175] msm: msm_media_info: Import buffer alignment changes
 from kernel 4.9

Makes venus happy
---
 include/uapi/media/msm_media_info.h | 175 ++++++++++++++++++----------
 1 file changed, 111 insertions(+), 64 deletions(-)

diff --git a/include/uapi/media/msm_media_info.h b/include/uapi/media/msm_media_info.h
index 9d0a0a25db43..24e045b5f06b 100644
--- a/include/uapi/media/msm_media_info.h
+++ b/include/uapi/media/msm_media_info.h
@@ -17,6 +17,10 @@
 #define MSM_MEDIA_ROUNDUP(__sz, __r) (((__sz) + ((__r) - 1)) / (__r))
 #endif
 
+#ifndef MSM_MEDIA_MAX
+#define MSM_MEDIA_MAX(__a, __b) ((__a) > (__b)?(__a):(__b))
+#endif
+
 enum color_fmts {
 	/* Venus NV12:
 	 * YUV 4:2:0 image with a plane of 8 bit Y samples followed
@@ -49,8 +53,10 @@ enum color_fmts {
 	 * UV_Stride : Width aligned to 128
 	 * Y_Scanlines: Height aligned to 32
 	 * UV_Scanlines: Height/2 aligned to 16
-	 * Total size = align(Y_Stride * Y_Scanlines
-	 *          + UV_Stride * UV_Scanlines, 4096)
+	 * Extradata: Arbitrary (software-imposed) padding
+	 * Total size = align((Y_Stride * Y_Scanlines
+	 *          + UV_Stride * UV_Scanlines
+	 *          + max(Extradata, Y_Stride * 8), 4096)
 	 */
 	COLOR_FMT_NV12,
 	/* Venus NV12:
@@ -119,8 +125,11 @@ enum color_fmts {
 	 * UV_Stride : Width aligned to 128
 	 * Y_Scanlines: Height aligned to 32
 	 * UV_Scanlines: Height/2 aligned to 16
-	 * Total size = align(Y_Stride * Y_Scanlines
-	 *          + UV_Stride * UV_Scanlines, 4096)
+	 * View_1 begin at: 0 (zero)
+	 * View_2 begin at: Y_Stride * Y_Scanlines + UV_Stride * UV_Scanlines
+	 * Extradata: Arbitrary (software-imposed) padding
+	 * Total size = align((2*(Y_Stride * Y_Scanlines)
+	 *          + 2*(UV_Stride * UV_Scanlines) + Extradata), 4096)
 	 */
 	COLOR_FMT_NV21,
 	/*
@@ -200,7 +209,7 @@ enum color_fmts {
 	 * Y_Stride = align(Width, 128)
 	 * UV_Stride = align(Width, 128)
 	 * Y_Scanlines = align(Height, 32)
-	 * UV_Scanlines = align(Height/2, 32)
+	 * UV_Scanlines = align(Height/2, 16)
 	 * Y_UBWC_Plane_size = align(Y_Stride * Y_Scanlines, 4096)
 	 * UV_UBWC_Plane_size = align(UV_Stride * UV_Scanlines, 4096)
 	 * Y_Meta_Stride = align(roundup(Width, Y_TileWidth), 64)
@@ -209,9 +218,11 @@ enum color_fmts {
 	 * UV_Meta_Stride = align(roundup(Width, UV_TileWidth), 64)
 	 * UV_Meta_Scanlines = align(roundup(Height, UV_TileHeight), 16)
 	 * UV_Meta_Plane_size = align(UV_Meta_Stride * UV_Meta_Scanlines, 4096)
+	 * Extradata = 8k
 	 *
 	 * Total size = align( Y_UBWC_Plane_size + UV_UBWC_Plane_size +
-	 *           Y_Meta_Plane_size + UV_Meta_Plane_size, 4096)
+	 *           Y_Meta_Plane_size + UV_Meta_Plane_size
+	 *           + max(Extradata, Y_Stride * 48), 4096)
 	 *
 	 *
 	 * (2) Venus NV12 UBWC Interlaced Buffer Format:
@@ -385,11 +396,13 @@ enum color_fmts {
 	 * UV_BF_Meta_Scanlines = align(roundup(Half_height, UV_TileHeight), 16)
 	 * UV_BF_Meta_Plane_size =
 	 *     align(UV_BF_Meta_Stride * UV_BF_Meta_Scanlines, 4096)
+	 * Extradata = 8k
 	 *
 	 * Total size = align( Y_UBWC_TF_Plane_size + UV_UBWC_TF_Plane_size +
 	 *           Y_TF_Meta_Plane_size + UV_TF_Meta_Plane_size +
 	 *			 Y_UBWC_BF_Plane_size + UV_UBWC_BF_Plane_size +
-	 *           Y_BF_Meta_Plane_size + UV_BF_Meta_Plane_size +, 4096)
+	 *           Y_BF_Meta_Plane_size + UV_BF_Meta_Plane_size +
+	 *           + max(Extradata, Y_TF_Stride * 48), 4096)
 	 */
 	COLOR_FMT_NV12_UBWC,
 	/* Venus NV12 10-bit UBWC:
@@ -462,8 +475,8 @@ enum color_fmts {
 	 * . . . . . . . . . . . . . . . .  -------> Buffer size aligned to 4k
 	 *
 	 *
-	 * Y_Stride = align(Width * 4/3, 256)
-	 * UV_Stride = align(Width * 4/3, 256)
+	 * Y_Stride = align(Width * 4/3, 128)
+	 * UV_Stride = align(Width * 4/3, 128)
 	 * Y_Scanlines = align(Height, 32)
 	 * UV_Scanlines = align(Height/2, 16)
 	 * Y_UBWC_Plane_Size = align(Y_Stride * Y_Scanlines, 4096)
@@ -474,9 +487,11 @@ enum color_fmts {
 	 * UV_Meta_Stride = align(roundup(Width, UV_TileWidth), 64)
 	 * UV_Meta_Scanlines = align(roundup(Height, UV_TileHeight), 16)
 	 * UV_Meta_Plane_size = align(UV_Meta_Stride * UV_Meta_Scanlines, 4096)
+	 * Extradata = 8k
 	 *
 	 * Total size = align(Y_UBWC_Plane_size + UV_UBWC_Plane_size +
-	 *           Y_Meta_Plane_size + UV_Meta_Plane_size, 4096)
+	 *           Y_Meta_Plane_size + UV_Meta_Plane_size
+	 *           + max(Extradata, Y_Stride * 48), 4096)
 	 */
 	COLOR_FMT_NV12_BPP10_UBWC,
 	/* Venus RGBA8888 format:
@@ -501,8 +516,9 @@ enum color_fmts {
 	 * RGB_Stride = align(Width * 4, 128)
 	 * RGB_Scanlines = align(Height, 32)
 	 * RGB_Plane_size = align(RGB_Stride * RGB_Scanlines, 4096)
+	 * Extradata = 8k
 	 *
-	 * Total size = align(RGB_Plane_size , 4096)
+	 * Total size = align(RGB_Plane_size + Extradata, 4096)
 	 */
 	COLOR_FMT_RGBA8888,
 	/* Venus RGBA8888 UBWC format:
@@ -539,15 +555,17 @@ enum color_fmts {
 	 * . . . . . . . . . . . . . . . .    -------> Buffer size aligned to 4k
 	 * . . . . . . . . . . . . . . . .              V
 	 *
-	 * RGB_Stride = align(Width * 4, 256)
-	 * RGB_Scanlines = align(Height, 16)
+	 * RGB_Stride = align(Width * 4, 128)
+	 * RGB_Scanlines = align(Height, 32)
 	 * RGB_Plane_size = align(RGB_Stride * RGB_Scanlines, 4096)
 	 * RGB_Meta_Stride = align(roundup(Width, RGB_TileWidth), 64)
 	 * RGB_Meta_Scanline = align(roundup(Height, RGB_TileHeight), 16)
 	 * RGB_Meta_Plane_size = align(RGB_Meta_Stride *
 	 *		RGB_Meta_Scanlines, 4096)
+	 * Extradata = 8k
 	 *
-	 * Total size = align(RGB_Meta_Plane_size + RGB_Plane_size, 4096)
+	 * Total size = align(RGB_Meta_Plane_size + RGB_Plane_size +
+	 *		Extradata, 4096)
 	 */
 	COLOR_FMT_RGBA8888_UBWC,
 	/* Venus RGBA1010102 UBWC format:
@@ -591,8 +609,10 @@ enum color_fmts {
 	 * RGB_Meta_Scanline = align(roundup(Height, RGB_TileHeight), 16)
 	 * RGB_Meta_Plane_size = align(RGB_Meta_Stride *
 	 *		RGB_Meta_Scanlines, 4096)
+	 * Extradata = 8k
 	 *
-	 * Total size = align(RGB_Meta_Plane_size + RGB_Plane_size, 4096)
+	 * Total size = align(RGB_Meta_Plane_size + RGB_Plane_size +
+	 *		Extradata, 4096)
 	 */
 	COLOR_FMT_RGBA1010102_UBWC,
 	/* Venus RGB565 UBWC format:
@@ -629,15 +649,17 @@ enum color_fmts {
 	 * . . . . . . . . . . . . . . . .    -------> Buffer size aligned to 4k
 	 * . . . . . . . . . . . . . . . .              V
 	 *
-	 * RGB_Stride = align(Width * 2, 256)
+	 * RGB_Stride = align(Width * 2, 128)
 	 * RGB_Scanlines = align(Height, 16)
 	 * RGB_Plane_size = align(RGB_Stride * RGB_Scanlines, 4096)
 	 * RGB_Meta_Stride = align(roundup(Width, RGB_TileWidth), 64)
 	 * RGB_Meta_Scanline = align(roundup(Height, RGB_TileHeight), 16)
 	 * RGB_Meta_Plane_size = align(RGB_Meta_Stride *
 	 *		RGB_Meta_Scanlines, 4096)
+	 * Extradata = 8k
 	 *
-	 * Total size = align(RGB_Meta_Plane_size + RGB_Plane_size, 4096)
+	 * Total size = align(RGB_Meta_Plane_size + RGB_Plane_size +
+	 *		Extradata, 4096)
 	 */
 	COLOR_FMT_RGB565_UBWC,
 	/* P010 UBWC:
@@ -722,9 +744,11 @@ enum color_fmts {
 	 * UV_Meta_Stride = align(roundup(Width, UV_TileWidth), 64)
 	 * UV_Meta_Scanlines = align(roundup(Height, UV_TileHeight), 16)
 	 * UV_Meta_Plane_size = align(UV_Meta_Stride * UV_Meta_Scanlines, 4096)
+	 * Extradata = 8k
 	 *
 	 * Total size = align(Y_UBWC_Plane_size + UV_UBWC_Plane_size +
-	 *           Y_Meta_Plane_size + UV_Meta_Plane_size, 4096)
+	 *           Y_Meta_Plane_size + UV_Meta_Plane_size
+	 *           + max(Extradata, Y_Stride * 48), 4096)
 	 */
 	COLOR_FMT_P010_UBWC,
 	/* Venus P010:
@@ -754,12 +778,14 @@ enum color_fmts {
 	 * . . . . . . . . . . . . . . . .  V
 	 * . . . . . . . . . . . . . . . .  --> Buffer size alignment
 	 *
-	 * Y_Stride : Width * 2 aligned to 256
-	 * UV_Stride : Width * 2 aligned to 256
+	 * Y_Stride : Width * 2 aligned to 128
+	 * UV_Stride : Width * 2 aligned to 128
 	 * Y_Scanlines: Height aligned to 32
 	 * UV_Scanlines: Height/2 aligned to 16
-	 * Total size = align(Y_Stride * Y_Scanlines
-	 *          + UV_Stride * UV_Scanlines, 4096)
+	 * Extradata: Arbitrary (software-imposed) padding
+	 * Total size = align((Y_Stride * Y_Scanlines
+	 *          + UV_Stride * UV_Scanlines
+	 *          + max(Extradata, Y_Stride * 8), 4096)
 	 */
 	COLOR_FMT_P010,
 	/* Venus NV12_512:
@@ -844,10 +870,13 @@ static inline unsigned int VENUS_Y_STRIDE(unsigned int color_fmt,
 		stride = MSM_MEDIA_ALIGN(stride * 4/3, alignment);
 		break;
 	case COLOR_FMT_P010_UBWC:
-	case COLOR_FMT_P010:
 		alignment = 256;
 		stride = MSM_MEDIA_ALIGN(width * 2, alignment);
 		break;
+	case COLOR_FMT_P010:
+		alignment = 128;
+		stride = MSM_MEDIA_ALIGN(width*2, alignment);
+		break;
 	default:
 		break;
 	}
@@ -888,10 +917,13 @@ static inline unsigned int VENUS_UV_STRIDE(unsigned int color_fmt,
 		stride = MSM_MEDIA_ALIGN(stride * 4/3, alignment);
 		break;
 	case COLOR_FMT_P010_UBWC:
-	case COLOR_FMT_P010:
 		alignment = 256;
 		stride = MSM_MEDIA_ALIGN(width * 2, alignment);
 		break;
+	case COLOR_FMT_P010:
+		alignment = 128;
+		stride = MSM_MEDIA_ALIGN(width*2, alignment);
+		break;
 	default:
 		break;
 	}
@@ -1233,7 +1265,9 @@ static inline unsigned int VENUS_RGB_META_SCANLINES(unsigned int color_fmt,
 static inline unsigned int VENUS_BUFFER_SIZE(unsigned int color_fmt,
 	unsigned int width, unsigned int height)
 {
-	unsigned int size = 0;
+	const unsigned int extra_size = VENUS_EXTRADATA_SIZE(width, height);
+	unsigned int uv_alignment = 0, size = 0;
+	unsigned int w_alignment = 512;
 	unsigned int y_plane, uv_plane, y_stride,
 		uv_stride, y_sclines, uv_sclines;
 	unsigned int y_ubwc_plane = 0, uv_ubwc_plane = 0;
@@ -1257,54 +1291,62 @@ static inline unsigned int VENUS_BUFFER_SIZE(unsigned int color_fmt,
 	switch (color_fmt) {
 	case COLOR_FMT_NV21:
 	case COLOR_FMT_NV12:
+		uv_alignment = 4096;
+		y_plane = y_stride * y_sclines;
+		uv_plane = uv_stride * uv_sclines + uv_alignment;
+		size = y_plane + uv_plane +
+				MSM_MEDIA_MAX(extra_size, 8 * y_stride);
+		size = MSM_MEDIA_ALIGN(size, 4096);
+
+		/* Additional size to cover last row of non-aligned frame */
+		if (width >= 2400 && height >= 2400) {
+			size += MSM_MEDIA_ALIGN(width, w_alignment) *
+					w_alignment;
+			size = MSM_MEDIA_ALIGN(size, 4096);
+		}
+		break;
 	case COLOR_FMT_P010:
 	case COLOR_FMT_NV12_512:
+		uv_alignment = 4096;
+		y_plane = y_stride * y_sclines;
+		uv_plane = uv_stride * uv_sclines + uv_alignment;
+		size = y_plane + uv_plane +
+				MSM_MEDIA_MAX(extra_size, 8 * y_stride);
+		size = MSM_MEDIA_ALIGN(size, 4096);
+		break;
 	case COLOR_FMT_NV12_128:
 		y_plane = y_stride * y_sclines;
 		uv_plane = uv_stride * uv_sclines;
 		size = y_plane + uv_plane;
+		size = 2 * size + extra_size;
+		size = MSM_MEDIA_ALIGN(size, 4096);
 		break;
 	case COLOR_FMT_NV12_UBWC:
+		y_sclines = VENUS_Y_SCANLINES(color_fmt, (height+1)>>1);
+		y_ubwc_plane = MSM_MEDIA_ALIGN(y_stride * y_sclines, 4096);
+		uv_sclines = VENUS_UV_SCANLINES(color_fmt, (height+1)>>1);
+		uv_ubwc_plane = MSM_MEDIA_ALIGN(uv_stride * uv_sclines, 4096);
 		y_meta_stride = VENUS_Y_META_STRIDE(color_fmt, width);
-		uv_meta_stride = VENUS_UV_META_STRIDE(color_fmt, width);
-		if (width <= INTERLACE_WIDTH_MAX &&
-			height <= INTERLACE_HEIGHT_MAX &&
-			(height * width) / 256 <= INTERLACE_MB_PER_FRAME_MAX) {
-			y_sclines =
-				VENUS_Y_SCANLINES(color_fmt, (height+1)>>1);
-			y_ubwc_plane =
-				MSM_MEDIA_ALIGN(y_stride * y_sclines, 4096);
-			uv_sclines =
-				VENUS_UV_SCANLINES(color_fmt, (height+1)>>1);
-			uv_ubwc_plane =
-				MSM_MEDIA_ALIGN(uv_stride * uv_sclines, 4096);
-			y_meta_scanlines =
+		y_meta_scanlines =
 			VENUS_Y_META_SCANLINES(color_fmt, (height+1)>>1);
-			y_meta_plane = MSM_MEDIA_ALIGN(
-				y_meta_stride * y_meta_scanlines, 4096);
-			uv_meta_scanlines =
+		y_meta_plane = MSM_MEDIA_ALIGN(
+			y_meta_stride * y_meta_scanlines, 4096);
+		uv_meta_stride = VENUS_UV_META_STRIDE(color_fmt, width);
+		uv_meta_scanlines =
 			VENUS_UV_META_SCANLINES(color_fmt, (height+1)>>1);
-			uv_meta_plane = MSM_MEDIA_ALIGN(uv_meta_stride *
-				uv_meta_scanlines, 4096);
-			size = (y_ubwc_plane + uv_ubwc_plane + y_meta_plane +
-				uv_meta_plane)*2;
-		} else {
-			y_sclines = VENUS_Y_SCANLINES(color_fmt, height);
-			y_ubwc_plane =
-				MSM_MEDIA_ALIGN(y_stride * y_sclines, 4096);
-			uv_sclines = VENUS_UV_SCANLINES(color_fmt, height);
-			uv_ubwc_plane =
-				MSM_MEDIA_ALIGN(uv_stride * uv_sclines, 4096);
-			y_meta_scanlines =
-				VENUS_Y_META_SCANLINES(color_fmt, height);
-			y_meta_plane = MSM_MEDIA_ALIGN(
-				y_meta_stride * y_meta_scanlines, 4096);
-			uv_meta_scanlines =
-				VENUS_UV_META_SCANLINES(color_fmt, height);
-			uv_meta_plane = MSM_MEDIA_ALIGN(uv_meta_stride *
-				uv_meta_scanlines, 4096);
-			size = (y_ubwc_plane + uv_ubwc_plane + y_meta_plane +
-				uv_meta_plane);
+		uv_meta_plane = MSM_MEDIA_ALIGN(uv_meta_stride *
+			uv_meta_scanlines, 4096);
+
+		size = (y_ubwc_plane + uv_ubwc_plane + y_meta_plane +
+			uv_meta_plane)*2 +
+			MSM_MEDIA_MAX(extra_size + 8192, 48 * y_stride);
+		size = MSM_MEDIA_ALIGN(size, 4096);
+
+		/* Additional size to cover last row of non-aligned frame */
+		if (width >= 2400 && height >= 2400) {
+			size += MSM_MEDIA_ALIGN(width, w_alignment) *
+					w_alignment;
+			size = MSM_MEDIA_ALIGN(size, 4096);
 		}
 		break;
 	case COLOR_FMT_NV12_BPP10_UBWC:
@@ -1320,7 +1362,9 @@ static inline unsigned int VENUS_BUFFER_SIZE(unsigned int color_fmt,
 					uv_meta_scanlines, 4096);
 
 		size = y_ubwc_plane + uv_ubwc_plane + y_meta_plane +
-			uv_meta_plane;
+			uv_meta_plane +
+			MSM_MEDIA_MAX(extra_size + 8192, 48 * y_stride);
+		size = MSM_MEDIA_ALIGN(size, 4096);
 		break;
 	case COLOR_FMT_P010_UBWC:
 		y_ubwc_plane = MSM_MEDIA_ALIGN(y_stride * y_sclines, 4096);
@@ -1336,10 +1380,12 @@ static inline unsigned int VENUS_BUFFER_SIZE(unsigned int color_fmt,
 
 		size = y_ubwc_plane + uv_ubwc_plane + y_meta_plane +
 			uv_meta_plane;
+		size = MSM_MEDIA_ALIGN(size, 4096);
 		break;
 	case COLOR_FMT_RGBA8888:
 		rgb_plane = MSM_MEDIA_ALIGN(rgb_stride  * rgb_scanlines, 4096);
 		size = rgb_plane;
+		size =  MSM_MEDIA_ALIGN(size, 4096);
 		break;
 	case COLOR_FMT_RGBA8888_UBWC:
 	case COLOR_FMT_RGBA1010102_UBWC:
@@ -1352,12 +1398,13 @@ static inline unsigned int VENUS_BUFFER_SIZE(unsigned int color_fmt,
 		rgb_meta_plane = MSM_MEDIA_ALIGN(rgb_meta_stride *
 					rgb_meta_scanlines, 4096);
 		size = rgb_ubwc_plane + rgb_meta_plane;
+		size = MSM_MEDIA_ALIGN(size, 4096);
 		break;
 	default:
 		break;
 	}
 invalid_input:
-	return MSM_MEDIA_ALIGN(size, 4096);
+	return size;
 }
 
 static inline unsigned int VENUS_BUFFER_SIZE_USED(unsigned int color_fmt,
-- 
2.48.1


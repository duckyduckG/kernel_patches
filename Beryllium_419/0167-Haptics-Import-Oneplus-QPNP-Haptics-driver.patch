From 5f7027deade30bd5ed5fd7a36e24030fc4b9f821 Mon Sep 17 00:00:00 2001
From: duckyduckG <duckyduckg65@gmail.com>
Date: Tue, 14 Jan 2025 01:34:12 +0500
Subject: [PATCH 167/175] Haptics: Import Oneplus QPNP Haptics driver

---
 drivers/leds/leds-qpnp-haptics.c | 479 +++++++++++++++++--------------
 1 file changed, 264 insertions(+), 215 deletions(-)

diff --git a/drivers/leds/leds-qpnp-haptics.c b/drivers/leds/leds-qpnp-haptics.c
index 989cbc53a280..a929e4a7822e 100644
--- a/drivers/leds/leds-qpnp-haptics.c
+++ b/drivers/leds/leds-qpnp-haptics.c
@@ -1,5 +1,5 @@
-/* Copyright (c) 2014-2018, The Linux Foundation. All rights reserved.
- * Copyright (C) 2018 XiaoMi, Inc.
+/* Copyright (c) 2014-2015, 2017-2018, The Linux Foundation.
+ * All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -93,6 +93,10 @@
 #define HAP_VMAX_SHIFT			1
 #define HAP_VMAX_MIN_MV			116
 #define HAP_VMAX_MAX_MV			3596
+#define HAP_VMAX_MAX_MV_STRONG		3596
+#define HAP_VMAX_MAX_MV_USER		500
+#define HAP_MIN_TIME_STRONG		100
+#define HAP_MIN_TIME_CALL		1000
 
 #define HAP_ILIM_CFG_REG(chip)		(chip->base + 0x52)
 #define HAP_ILIM_SEL_MASK		BIT(0)
@@ -325,13 +329,9 @@ struct hap_chip {
 	u32				max_play_time_ms;
 	u32				vmax_mv;
 	u8				ilim_ma;
-	bool				overdrive;
 	u32				sc_deb_cycles;
 	u32				wave_play_rate_us;
 	u16				last_rate_cfg;
-	int				effect_index;
-	u32				effect_max;
-	u8				(*effect_arry)[HAP_WAVE_SAMP_LEN];
 	u32				wave_rep_cnt;
 	u32				wave_s_rep_cnt;
 	u32				ext_pwm_freq_khz;
@@ -358,8 +358,15 @@ struct hap_chip {
 	bool				lra_auto_mode;
 	bool				play_irq_en;
 	bool				auto_res_err_recovery_hw;
+	int				vmax_override;
+	u32				vmax_mv_strong;
+	u32				vmax_mv_call;
+	u32				vmax_mv_user;
+	u32				min_time_strong;
 };
 
+struct hap_chip *gchip;
+
 static int qpnp_haptics_parse_buffer_dt(struct hap_chip *chip);
 static int qpnp_haptics_parse_pwm_dt(struct hap_chip *chip);
 
@@ -472,7 +479,8 @@ static int qpnp_haptics_auto_res_enable(struct hap_chip *chip, bool enable)
 {
 	int rc = 0;
 	u32 delay_us = HAPTICS_BACK_EMF_DELAY_US;
-	u8 val, auto_res_mode_qwd;
+	u8 val;
+	bool auto_res_mode_qwd;
 
 	if (chip->act_type != HAP_LRA)
 		return 0;
@@ -484,6 +492,15 @@ static int qpnp_haptics_auto_res_enable(struct hap_chip *chip, bool enable)
 		auto_res_mode_qwd = (chip->ares_cfg.auto_res_mode ==
 							HAP_AUTO_RES_QWD);
 
+	/*
+	 * Do not enable auto resonance if auto mode is enabled and auto
+	 * resonance mode is QWD, meaning long pattern.
+	 */
+	if (chip->lra_auto_mode && auto_res_mode_qwd && enable) {
+		pr_debug("auto_mode enabled, not enabling auto_res\n");
+		return 0;
+	}
+
 	/*
 	 * For auto resonance detection to work properly, sufficient back-emf
 	 * has to be generated. In general, back-emf takes some time to build
@@ -730,22 +747,15 @@ static int qpnp_haptics_play(struct hap_chip *chip, bool enable)
 			goto out;
 		}
 
-		if (chip->play_mode != HAP_BUFFER) {
-			hrtimer_start(&chip->stop_timer,
-				ktime_set(time_ms / MSEC_PER_SEC,
-				(time_ms % MSEC_PER_SEC) * NSEC_PER_MSEC),
-				HRTIMER_MODE_REL);
+		hrtimer_start(&chip->stop_timer,
+			ktime_set(time_ms / MSEC_PER_SEC,
+			(time_ms % MSEC_PER_SEC) * NSEC_PER_MSEC),
+			HRTIMER_MODE_REL);
 
-			rc = qpnp_haptics_auto_res_enable(chip, true);
-			if (rc < 0) {
-				pr_err("Error in enabling auto_res, rc=%d\n", rc);
-				goto out;
-			}
-		} else {
-			hrtimer_start(&chip->stop_timer,
-				ktime_set(40 / MSEC_PER_SEC,
-				(time_ms % MSEC_PER_SEC) * NSEC_PER_MSEC),
-				HRTIMER_MODE_REL);
+		rc = qpnp_haptics_auto_res_enable(chip, true);
+		if (rc < 0) {
+			pr_err("Error in enabling auto_res, rc=%d\n", rc);
+			goto out;
 		}
 
 		if (is_sw_lra_auto_resonance_control(chip))
@@ -759,12 +769,6 @@ static int qpnp_haptics_play(struct hap_chip *chip, bool enable)
 			goto out;
 		}
 
-		rc = qpnp_haptics_mod_enable(chip, false);
-		if (rc < 0) {
-			pr_err("Error in disabling module, rc=%d\n", rc);
-			goto out;
-		}
-
 		if (is_sw_lra_auto_resonance_control(chip)) {
 			if (chip->status_flags & AUTO_RESONANCE_ENABLED)
 				qpnp_haptics_update_lra_frequency(chip);
@@ -1054,15 +1058,6 @@ static int qpnp_haptics_play_mode_config(struct hap_chip *chip)
 	val = chip->play_mode << HAP_WF_SOURCE_SHIFT;
 	rc = qpnp_haptics_masked_write_reg(chip, HAP_SEL_REG(chip),
 			HAP_WF_SOURCE_MASK, val);
-	if (!rc) {
-		if (chip->play_mode == HAP_BUFFER && !chip->play_irq_en) {
-			enable_irq(chip->play_irq);
-			chip->play_irq_en = true;
-		} else if (chip->play_mode != HAP_BUFFER && chip->play_irq_en) {
-			disable_irq(chip->play_irq);
-			chip->play_irq_en = false;
-		}
-	}
 	return rc;
 }
 
@@ -1187,34 +1182,27 @@ static int qpnp_haptics_auto_mode_config(struct hap_chip *chip, int time_ms)
 	old_play_mode = chip->play_mode;
 	pr_debug("auto_mode, time_ms: %d\n", time_ms);
 	if (time_ms <= 20) {
-		int index;
-		index = time_ms / 5;
-
-		/*
-		 * only change pattern for different vibration cycle.
-		 * */
-		if (chip->effect_max) {
-			int i = 0;
-			if (index != chip->effect_index) {
-				if (index >= chip->effect_max) {
-						index = chip->effect_max - 1;
-				}
-				chip->effect_index = index;
-				for (i = 0; i < HAP_WAVE_SAMP_LEN; i++) {
-					wave_samp[i] = (u32)(chip->effect_arry[index][i]);
-				}
-				rc = qpnp_haptics_buffer_config(chip, wave_samp, chip->overdrive);
-				if (rc < 0) {
-					pr_err("Error in configuring buffer mode %d\n",
-						rc);
-					return rc;
-				}
+		wave_samp[0] = 0x7e;
+		wave_samp[1] = 0x7e;
+		wave_samp[2] = 0x7e;
+		wave_samp[3] = 0x7e;
+		wave_samp[4] = 0x7e;
+		wave_samp[5] = 0x28;
+		wave_samp[6] = 0x28;
+		wave_samp[7] = 0x28;
+
+		/* short pattern */
+		rc = qpnp_haptics_parse_buffer_dt(chip);
+		if (!rc) {
+			rc = qpnp_haptics_wave_rep_config(chip,
+				HAP_WAVE_REPEAT | HAP_WAVE_SAMP_REPEAT);
+			if (rc < 0) {
+				pr_err("Error in configuring wave_rep config %d\n",
+					rc);
+				return rc;
 			}
-		} else
-		{
-			wave_samp[0] = HAP_WF_SAMP_MAX;
-			wave_samp[1] = HAP_WF_SAMP_MAX;
-			rc = qpnp_haptics_buffer_config(chip, wave_samp, chip->overdrive);
+
+			rc = qpnp_haptics_buffer_config(chip, wave_samp, false);
 			if (rc < 0) {
 				pr_err("Error in configuring buffer mode %d\n",
 					rc);
@@ -1222,14 +1210,6 @@ static int qpnp_haptics_auto_mode_config(struct hap_chip *chip, int time_ms)
 			}
 		}
 
-		rc = qpnp_haptics_wave_rep_config(chip,
-			HAP_WAVE_REPEAT | HAP_WAVE_SAMP_REPEAT);
-		if (rc < 0) {
-			pr_err("Error in configuring wave_rep config %d\n",
-				rc);
-			return rc;
-		}
-
 		ares_cfg.lra_high_z = HAP_LRA_HIGH_Z_OPT1;
 		ares_cfg.lra_res_cal_period = HAP_RES_CAL_PERIOD_MIN;
 		if (chip->revid->pmic_subtype == PM660_SUBTYPE) {
@@ -1242,11 +1222,18 @@ static int qpnp_haptics_auto_mode_config(struct hap_chip *chip, int time_ms)
 			ares_cfg.calibrate_at_eop = -EINVAL;
 		}
 
-		vmax_mv = HAP_VMAX_MAX_MV;
+		if (chip->vmax_mv >= 2320)
+			vmax_mv = HAP_VMAX_MAX_MV;
+		else
+			vmax_mv = chip->vmax_mv;
 		rc = qpnp_haptics_vmax_config(chip, vmax_mv, true);
 		if (rc < 0)
 			return rc;
 
+		brake_pat[0] = 0x3;
+		brake_pat[1] = 0x3;
+		brake_pat[2] = 0x3;
+		brake_pat[3] = 0x3;
 		rc = qpnp_haptics_brake_config(chip, brake_pat);
 		if (rc < 0)
 			return rc;
@@ -1260,6 +1247,31 @@ static int qpnp_haptics_auto_mode_config(struct hap_chip *chip, int time_ms)
 		chip->play_mode = HAP_BUFFER;
 		chip->wave_shape = HAP_WAVE_SINE;
 	} else {
+		wave_samp[0] = 0x28;
+		wave_samp[1] = 0x28;
+		wave_samp[2] = 0x28;
+		wave_samp[3] = 0x28;
+		wave_samp[4] = 0x28;
+		wave_samp[5] = 0x28;
+		wave_samp[6] = 0x28;
+		wave_samp[7] = 0x28;
+		rc = qpnp_haptics_parse_buffer_dt(chip);
+		if (!rc) {
+			rc = qpnp_haptics_wave_rep_config(chip,
+				HAP_WAVE_REPEAT | HAP_WAVE_SAMP_REPEAT);
+			if (rc < 0) {
+				pr_err("Error in configuring wave_rep config %d\n",
+					rc);
+				return rc;
+			}
+
+			rc = qpnp_haptics_buffer_config(chip, wave_samp, false);
+			if (rc < 0) {
+				pr_err("Error in configuring buffer mode %d\n",
+					rc);
+				return rc;
+			}
+		}
 		/* long pattern */
 		ares_cfg.lra_high_z = HAP_LRA_HIGH_Z_OPT1;
 		if (chip->revid->pmic_subtype == PM660_SUBTYPE) {
@@ -1269,8 +1281,8 @@ static int qpnp_haptics_auto_mode_config(struct hap_chip *chip, int time_ms)
 			ares_cfg.lra_qwd_drive_duration = 0;
 			ares_cfg.calibrate_at_eop = 1;
 		} else {
-			ares_cfg.auto_res_mode = HAP_AUTO_RES_QWD;
-			ares_cfg.lra_res_cal_period = HAP_RES_CAL_PERIOD_MIN;
+			ares_cfg.auto_res_mode = HAP_AUTO_RES_ZXD_EOP;
+			ares_cfg.lra_res_cal_period = HAP_RES_CAL_PERIOD_MAX;
 			ares_cfg.lra_qwd_drive_duration = -EINVAL;
 			ares_cfg.calibrate_at_eop = -EINVAL;
 		}
@@ -1280,6 +1292,10 @@ static int qpnp_haptics_auto_mode_config(struct hap_chip *chip, int time_ms)
 		if (rc < 0)
 			return rc;
 
+		brake_pat[0] = 0x3;
+		brake_pat[1] = 0x3;
+		brake_pat[2] = 0x3;
+		brake_pat[3] = 0x3;
 		rc = qpnp_haptics_brake_config(chip, brake_pat);
 		if (rc < 0)
 			return rc;
@@ -1290,7 +1306,7 @@ static int qpnp_haptics_auto_mode_config(struct hap_chip *chip, int time_ms)
 			chip->play_irq_en = false;
 		}
 
-		chip->play_mode = HAP_DIRECT;
+		chip->play_mode = HAP_BUFFER;
 		chip->wave_shape = HAP_WAVE_SINE;
 	}
 
@@ -1315,6 +1331,34 @@ static int qpnp_haptics_auto_mode_config(struct hap_chip *chip, int time_ms)
 	return 0;
 }
 
+void set_vibrate(int val)
+{
+	int rc;
+
+	if (val > gchip->max_play_time_ms)
+		return;
+
+	mutex_lock(&gchip->param_lock);
+	rc = qpnp_haptics_auto_mode_config(gchip, val);
+	if (rc < 0) {
+		pr_err("Unable to do auto mode config\n");
+		mutex_unlock(&gchip->param_lock);
+		return;
+	}
+
+	gchip->play_time_ms = val;
+	mutex_unlock(&gchip->param_lock);
+
+	hrtimer_cancel(&gchip->stop_timer);
+	if (is_sw_lra_auto_resonance_control(gchip))
+		hrtimer_cancel(&gchip->auto_res_err_poll_timer);
+	cancel_work_sync(&gchip->haptics_work);
+
+	atomic_set(&gchip->state, 1);
+	schedule_work(&gchip->haptics_work);
+
+}
+
 static irqreturn_t qpnp_haptics_play_irq_handler(int irq, void *data)
 {
 	struct hap_chip *chip = data;
@@ -1460,8 +1504,7 @@ static ssize_t qpnp_haptics_show_duration(struct device *dev,
 		time_us = ktime_to_us(time_rem);
 	}
 
-	return snprintf(buf, PAGE_SIZE, "%lld\n", time_us / 1000);
-	return 0;
+	return snprintf(buf, PAGE_SIZE, "%lld\n", div_s64(time_us, 1000));
 }
 
 static ssize_t qpnp_haptics_store_duration(struct device *dev,
@@ -1469,7 +1512,7 @@ static ssize_t qpnp_haptics_store_duration(struct device *dev,
 {
 	struct led_classdev *cdev = dev_get_drvdata(dev);
 	struct hap_chip *chip = container_of(cdev, struct hap_chip, cdev);
-	u32 val;
+	u32 val, old_vmax_mv;
 	int rc;
 
 	rc = kstrtouint(buf, 0, &val);
@@ -1483,6 +1526,22 @@ static ssize_t qpnp_haptics_store_duration(struct device *dev,
 	if (val > chip->max_play_time_ms)
 		return -EINVAL;
 
+	if (chip->vmax_override) {
+		old_vmax_mv = chip->vmax_mv;
+		if (val >= HAP_MIN_TIME_CALL)
+			chip->vmax_mv = chip->vmax_mv_call;
+		else if (val >= HAP_MIN_TIME_STRONG)
+			chip->vmax_mv = chip->vmax_mv_strong;
+		else
+			chip->vmax_mv = chip->vmax_mv_user;
+
+		rc = qpnp_haptics_vmax_config(chip, chip->vmax_mv, false);
+		if (rc < 0) {
+			chip->vmax_mv = old_vmax_mv;
+			return rc;
+		}
+	}
+
 	mutex_lock(&chip->param_lock);
 	rc = qpnp_haptics_auto_mode_config(chip, val);
 	if (rc < 0) {
@@ -1497,37 +1556,6 @@ static ssize_t qpnp_haptics_store_duration(struct device *dev,
 	return count;
 }
 
-static ssize_t qpnp_haptics_store_overdrive(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t count)
-{
-	struct led_classdev *cdev = dev_get_drvdata(dev);
-	struct hap_chip *chip = container_of(cdev, struct hap_chip, cdev);
-	u32 val;
-	int rc;
-
-	rc = kstrtouint(buf, 0, &val);
-	if (rc < 0)
-		return rc;
-
-	/* setting 0 on duration is NOP for now */
-	if (val){
-		chip->overdrive = true;
-	} else {
-		chip->overdrive = false;
-	}
-	return count;
-}
-
-static ssize_t qpnp_haptics_show_overdrive(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	struct led_classdev *cdev = dev_get_drvdata(dev);
-	struct hap_chip *chip = container_of(cdev, struct hap_chip, cdev);
-
-	return snprintf(buf, PAGE_SIZE, "%u\n", chip->overdrive);
-	return 0;
-}
-
 static ssize_t qpnp_haptics_show_activate(struct device *dev,
 		struct device_attribute *attr, char *buf)
 {
@@ -1550,6 +1578,9 @@ static ssize_t qpnp_haptics_store_activate(struct device *dev,
 	if (val != 0 && val != 1)
 		return count;
 
+	if (chip->vmax_mv <= HAP_VMAX_MIN_MV && (val != 0))
+		return count;
+
 	if (val) {
 		hrtimer_cancel(&chip->stop_timer);
 		if (is_sw_lra_auto_resonance_control(chip))
@@ -1707,155 +1738,174 @@ static ssize_t qpnp_haptics_store_wf_samp(struct device *dev,
 	return count;
 }
 
-static ssize_t qpnp_haptics_show_effect_samp(struct device *dev,
+static ssize_t qpnp_haptics_show_wf_rep_count(struct device *dev,
 		struct device_attribute *attr, char *buf)
 {
 	struct led_classdev *cdev = dev_get_drvdata(dev);
 	struct hap_chip *chip = container_of(cdev, struct hap_chip, cdev);
-	char str[HAP_STR_SIZE + 1];
-	char *ptr = str;
-	int i, len = 0;
-    pr_err("%s---effect_index=%d\n", __func__, chip->effect_index);
-	if (chip->effect_index == -1){
-        pr_err("%s, chip->effect_index == -1\n", __func__);
-		return 0;
-    }
-    pr_err("%s, HAP_WAVE_SAMP_LEN=%d\n", __func__, HAP_WAVE_SAMP_LEN);
-	for (i = 0; i < HAP_WAVE_SAMP_LEN; i++) {
-		len = scnprintf(ptr, HAP_STR_SIZE, "%x ", chip->effect_arry[chip->effect_index][i]);
-		ptr += len;
-	}
-	ptr[len] = '\0';
 
-	return snprintf(buf, PAGE_SIZE, "%s\n", str);
+	return snprintf(buf, PAGE_SIZE, "%d\n", chip->wave_rep_cnt);
 }
 
-static ssize_t qpnp_haptics_store_effect_samp(struct device *dev,
+static ssize_t qpnp_haptics_store_wf_rep_count(struct device *dev,
 		struct device_attribute *attr, const char *buf, size_t count)
 {
 	struct led_classdev *cdev = dev_get_drvdata(dev);
 	struct hap_chip *chip = container_of(cdev, struct hap_chip, cdev);
-	int bytes_read, rc;
-	unsigned int data, pos = 0, i = 0;
-	u32 wave_samp[HAP_WAVE_SAMP_LEN] = {0};
-	bytes_read = 0;
+	int data, rc, old_wave_rep_cnt;
 
-    pr_err("%s---effect_index=%d\n", __func__, chip->effect_index);
-	if (chip->effect_index == -1)
-		return 0;
+	rc = kstrtoint(buf, 10, &data);
+	if (rc < 0)
+		return rc;
 
-	while (pos < count && i < HAP_WAVE_SAMP_LEN &&
-		sscanf(buf + pos, "%x%n", &data, &bytes_read) == 1) {
-        pr_err("%s, while-loop\n", __func__);
-		/* bit 0 is not used in WF_Sx */
-		wave_samp[i] = data;
-		chip->effect_arry[chip->effect_index][i++] = data;
-		pos += bytes_read;
+	old_wave_rep_cnt = chip->wave_rep_cnt;
+	chip->wave_rep_cnt = data;
+	rc = qpnp_haptics_wave_rep_config(chip, HAP_WAVE_REPEAT);
+	if (rc < 0) {
+		chip->wave_rep_cnt = old_wave_rep_cnt;
+		return rc;
 	}
 
-	for (i = pos; i < HAP_WAVE_SAMP_LEN; i++)
-		chip->effect_arry[chip->effect_index][i++] = 0;
+	return count;
+}
+
+static ssize_t qpnp_haptics_show_wf_s_rep_count(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct led_classdev *cdev = dev_get_drvdata(dev);
+	struct hap_chip *chip = container_of(cdev, struct hap_chip, cdev);
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", chip->wave_s_rep_cnt);
+}
+
+static ssize_t qpnp_haptics_store_wf_s_rep_count(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t count)
+{
+	struct led_classdev *cdev = dev_get_drvdata(dev);
+	struct hap_chip *chip = container_of(cdev, struct hap_chip, cdev);
+	int data, rc, old_wave_s_rep_cnt;
+
+	rc = kstrtoint(buf, 10, &data);
+	if (rc < 0)
+		return rc;
 
-	rc = qpnp_haptics_buffer_config(chip, wave_samp, chip->overdrive);
+	old_wave_s_rep_cnt = chip->wave_s_rep_cnt;
+	chip->wave_s_rep_cnt = data;
+	rc = qpnp_haptics_wave_rep_config(chip, HAP_WAVE_SAMP_REPEAT);
 	if (rc < 0) {
-		pr_err("Error in configuring buffer mode %d\n", rc);
+		chip->wave_s_rep_cnt = old_wave_s_rep_cnt;
 		return rc;
 	}
 
 	return count;
 }
 
-static ssize_t qpnp_haptics_show_effect_max(struct device *dev,
+static ssize_t qpnp_haptics_show_vmax(struct device *dev,
 		struct device_attribute *attr, char *buf)
 {
 	struct led_classdev *cdev = dev_get_drvdata(dev);
 	struct hap_chip *chip = container_of(cdev, struct hap_chip, cdev);
-	return snprintf(buf, PAGE_SIZE, "%u\n", chip->effect_max);
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", chip->vmax_mv);
 }
 
-static ssize_t qpnp_haptics_store_effect_max(struct device *dev,
+static ssize_t qpnp_haptics_store_vmax(struct device *dev,
 		struct device_attribute *attr, const char *buf, size_t count)
 {
 	struct led_classdev *cdev = dev_get_drvdata(dev);
 	struct hap_chip *chip = container_of(cdev, struct hap_chip, cdev);
+	int data, rc, old_vmax_mv;
+
+	rc = kstrtoint(buf, 10, &data);
+	if (rc < 0)
+		return rc;
+
+	if (chip->vmax_override)
+		return count;
+
+	old_vmax_mv = chip->vmax_mv;
+	chip->vmax_mv = data;
+	rc = qpnp_haptics_vmax_config(chip, chip->vmax_mv, false);
+	if (rc < 0) {
+		chip->vmax_mv = old_vmax_mv;
+		return rc;
+	}
 
-	if (sscanf(buf, " %u", &chip->effect_max) != 1)
-			return -EINVAL;
 	return count;
 }
 
-static ssize_t qpnp_haptics_show_wf_rep_count(struct device *dev,
+static ssize_t qpnp_haptics_show_vmax_mv_user(struct device *dev,
 		struct device_attribute *attr, char *buf)
 {
 	struct led_classdev *cdev = dev_get_drvdata(dev);
 	struct hap_chip *chip = container_of(cdev, struct hap_chip, cdev);
 
-	return snprintf(buf, PAGE_SIZE, "%d\n", chip->wave_rep_cnt);
+	return snprintf(buf, PAGE_SIZE, "%d\n", chip->vmax_mv_user);
 }
 
-static ssize_t qpnp_haptics_store_wf_rep_count(struct device *dev,
+static ssize_t qpnp_haptics_store_vmax_mv_user(struct device *dev,
 		struct device_attribute *attr, const char *buf, size_t count)
 {
 	struct led_classdev *cdev = dev_get_drvdata(dev);
 	struct hap_chip *chip = container_of(cdev, struct hap_chip, cdev);
-	int data, rc, old_wave_rep_cnt;
+	int data, rc, old_vmax_mv;
 
 	rc = kstrtoint(buf, 10, &data);
 	if (rc < 0)
 		return rc;
 
-	old_wave_rep_cnt = chip->wave_rep_cnt;
-	chip->wave_rep_cnt = data;
-	rc = qpnp_haptics_wave_rep_config(chip, HAP_WAVE_REPEAT);
+	old_vmax_mv = chip->vmax_mv_user;
+	chip->vmax_mv_user = data;
+	rc = qpnp_haptics_vmax_config(chip, chip->vmax_mv_user, false);
 	if (rc < 0) {
-		chip->wave_rep_cnt = old_wave_rep_cnt;
+		chip->vmax_mv_user = old_vmax_mv;
 		return rc;
 	}
 
 	return count;
 }
 
-static ssize_t qpnp_haptics_show_wf_s_rep_count(struct device *dev,
+static ssize_t qpnp_haptics_show_vmax_mv_strong(struct device *dev,
 		struct device_attribute *attr, char *buf)
 {
 	struct led_classdev *cdev = dev_get_drvdata(dev);
 	struct hap_chip *chip = container_of(cdev, struct hap_chip, cdev);
 
-	return snprintf(buf, PAGE_SIZE, "%d\n", chip->wave_s_rep_cnt);
+	return snprintf(buf, PAGE_SIZE, "%d\n", chip->vmax_mv_strong);
 }
 
-static ssize_t qpnp_haptics_store_wf_s_rep_count(struct device *dev,
+static ssize_t qpnp_haptics_store_vmax_mv_strong(struct device *dev,
 		struct device_attribute *attr, const char *buf, size_t count)
 {
 	struct led_classdev *cdev = dev_get_drvdata(dev);
 	struct hap_chip *chip = container_of(cdev, struct hap_chip, cdev);
-	int data, rc, old_wave_s_rep_cnt;
+	int data, rc, old_vmax_mv;
 
 	rc = kstrtoint(buf, 10, &data);
 	if (rc < 0)
 		return rc;
 
-	old_wave_s_rep_cnt = chip->wave_s_rep_cnt;
-	chip->wave_s_rep_cnt = data;
-	rc = qpnp_haptics_wave_rep_config(chip, HAP_WAVE_SAMP_REPEAT);
+	old_vmax_mv = chip->vmax_mv_strong;
+	chip->vmax_mv_strong = data;
+	rc = qpnp_haptics_vmax_config(chip, chip->vmax_mv_strong, false);
 	if (rc < 0) {
-		chip->wave_s_rep_cnt = old_wave_s_rep_cnt;
+		chip->vmax_mv_strong = old_vmax_mv;
 		return rc;
 	}
 
 	return count;
 }
 
-static ssize_t qpnp_haptics_show_vmax(struct device *dev,
+static ssize_t qpnp_haptics_show_vmax_mv_call(struct device *dev,
 		struct device_attribute *attr, char *buf)
 {
 	struct led_classdev *cdev = dev_get_drvdata(dev);
 	struct hap_chip *chip = container_of(cdev, struct hap_chip, cdev);
 
-	return snprintf(buf, PAGE_SIZE, "%d\n", chip->vmax_mv);
+	return snprintf(buf, PAGE_SIZE, "%d\n", chip->vmax_mv_call);
 }
 
-static ssize_t qpnp_haptics_store_vmax(struct device *dev,
+static ssize_t qpnp_haptics_store_vmax_mv_call(struct device *dev,
 		struct device_attribute *attr, const char *buf, size_t count)
 {
 	struct led_classdev *cdev = dev_get_drvdata(dev);
@@ -1866,17 +1916,46 @@ static ssize_t qpnp_haptics_store_vmax(struct device *dev,
 	if (rc < 0)
 		return rc;
 
-	old_vmax_mv = chip->vmax_mv;
-	chip->vmax_mv = data;
-	rc = qpnp_haptics_vmax_config(chip, chip->vmax_mv, false);
+	old_vmax_mv = chip->vmax_mv_call;
+	chip->vmax_mv_call = data;
+	rc = qpnp_haptics_vmax_config(chip, chip->vmax_mv_call, false);
 	if (rc < 0) {
-		chip->vmax_mv = old_vmax_mv;
+		chip->vmax_mv_call = old_vmax_mv;
 		return rc;
 	}
 
 	return count;
 }
 
+
+static ssize_t qpnp_haptics_show_vmax_override(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct led_classdev *cdev = dev_get_drvdata(dev);
+	struct hap_chip *chip = container_of(cdev, struct hap_chip, cdev);
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", chip->vmax_override);
+}
+
+static ssize_t qpnp_haptics_store_vmax_override(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t count)
+{
+	struct led_classdev *cdev = dev_get_drvdata(dev);
+	struct hap_chip *chip = container_of(cdev, struct hap_chip, cdev);
+	int data, rc;
+
+	rc = kstrtoint(buf, 10, &data);
+	if (rc < 0)
+		return rc;
+
+	if (data != 0 && data != 1)
+		return count;
+
+	chip->vmax_override = !!data;
+
+	return count;
+}
+
 static ssize_t qpnp_haptics_show_lra_auto_mode(struct device *dev,
 		struct device_attribute *attr, char *buf)
 {
@@ -1908,23 +1987,21 @@ static struct device_attribute qpnp_haptics_attrs[] = {
 	__ATTR(state, 0664, qpnp_haptics_show_state, qpnp_haptics_store_state),
 	__ATTR(duration, 0664, qpnp_haptics_show_duration,
 		qpnp_haptics_store_duration),
-	__ATTR(overdrive, 0664, qpnp_haptics_show_overdrive,
-		qpnp_haptics_store_overdrive),
 	__ATTR(activate, 0664, qpnp_haptics_show_activate,
 		qpnp_haptics_store_activate),
 	__ATTR(play_mode, 0664, qpnp_haptics_show_play_mode,
 		qpnp_haptics_store_play_mode),
 	__ATTR(wf_samp, 0664, qpnp_haptics_show_wf_samp,
 		qpnp_haptics_store_wf_samp),
-	__ATTR(effect_samp, 0664, qpnp_haptics_show_effect_samp,
-		qpnp_haptics_store_effect_samp),
-	__ATTR(effect_max, 0664, qpnp_haptics_show_effect_max,
-		qpnp_haptics_store_effect_max),
 	__ATTR(wf_rep_count, 0664, qpnp_haptics_show_wf_rep_count,
 		qpnp_haptics_store_wf_rep_count),
 	__ATTR(wf_s_rep_count, 0664, qpnp_haptics_show_wf_s_rep_count,
 		qpnp_haptics_store_wf_s_rep_count),
 	__ATTR(vmax_mv, 0664, qpnp_haptics_show_vmax, qpnp_haptics_store_vmax),
+	__ATTR(vmax_override, 0664, qpnp_haptics_show_vmax_override, qpnp_haptics_store_vmax_override),
+	__ATTR(vmax_mv_user, 0664, qpnp_haptics_show_vmax_mv_user, qpnp_haptics_store_vmax_mv_user),
+	__ATTR(vmax_mv_strong, 0664, qpnp_haptics_show_vmax_mv_strong, qpnp_haptics_store_vmax_mv_strong),
+	__ATTR(vmax_mv_call, 0664, qpnp_haptics_show_vmax_mv_call, qpnp_haptics_store_vmax_mv_call),
 	__ATTR(lra_auto_mode, 0664, qpnp_haptics_show_lra_auto_mode,
 		qpnp_haptics_store_lra_auto_mode),
 };
@@ -2057,6 +2134,7 @@ static int qpnp_haptics_config(struct hap_chip *chip)
 			return rc;
 		}
 
+		chip->play_irq_en = true;
 		/* use play_irq only for buffer mode */
 		if (chip->play_mode != HAP_BUFFER) {
 			disable_irq(chip->play_irq);
@@ -2084,40 +2162,10 @@ static int qpnp_haptics_parse_buffer_dt(struct hap_chip *chip)
 	struct device_node *node = chip->pdev->dev.of_node;
 	u32 temp;
 	int rc, i, wf_samp_len;
-	struct property *prop;
 
 	if (chip->wave_rep_cnt > 0 || chip->wave_s_rep_cnt > 0)
 		return 0;
 
-	/*
-	 * brake_pat_index = -1 to make sure brake_pat will be changed in the first time.
-	 * brake_pat_max = 0 to make sure disable changing brake_pattern.
-	 * */
-	chip->effect_index = -1;
-	chip->effect_max = 0;
-	rc = of_property_read_u32(node, "qcom,effect-max", &temp);
-	if (!rc) {
-		chip->effect_max = temp;
-		prop = of_find_property(node, "qcom,effect-arry", &temp);
-		if (!prop) {
-				dev_info(&chip->pdev->dev, "effect arry not found");
-			} else if (temp != HAP_WAVE_SAMP_LEN * chip->effect_max) {
-				dev_err(&chip->pdev->dev, "Invalid len of effect arry \n");
-				chip->effect_max = 0;
-				return -EINVAL;
-			} else {
-				chip->effect_arry = (u8 (*)[HAP_WAVE_SAMP_LEN])kmalloc(HAP_WAVE_SAMP_LEN * chip->effect_max, GFP_KERNEL);
-				memcpy(chip->effect_arry, prop->value,
-						HAP_WAVE_SAMP_LEN *  chip->effect_max);
-				for (temp = 0; temp < chip->effect_max; temp++) {
-					pr_info("effect_arry:%u: %u,%u,%u,%u,%u,%u,%u,%u\n",
-							temp, chip->effect_arry[temp][0], chip->effect_arry[temp][1],
-							chip->effect_arry[temp][2], chip->effect_arry[temp][3],
-							chip->effect_arry[temp][4], chip->effect_arry[temp][5],
-							chip->effect_arry[temp][6], chip->effect_arry[temp][7]);
-				}
-			}
-	}
 	chip->wave_rep_cnt = WF_REPEAT_MIN;
 	rc = of_property_read_u32(node, "qcom,wave-rep-cnt", &temp);
 	if (!rc) {
@@ -2329,6 +2377,9 @@ static int qpnp_haptics_parse_dt(struct hap_chip *chip)
 		return rc;
 	}
 
+	chip->vmax_mv_call = HAP_VMAX_MAX_MV_STRONG;
+	chip->vmax_mv_strong = HAP_VMAX_MAX_MV_STRONG;
+	chip->vmax_mv_user = HAP_VMAX_MAX_MV_USER;
 	chip->vmax_mv = HAP_VMAX_MAX_MV;
 	rc = of_property_read_u32(node, "qcom,vmax-mv", &temp);
 	if (!rc) {
@@ -2338,8 +2389,6 @@ static int qpnp_haptics_parse_dt(struct hap_chip *chip)
 		return rc;
 	}
 
-	chip->overdrive =  (of_property_read_bool(node, "qcom,overdrive"));
-
 	chip->ilim_ma = HAP_ILIM_400_MA;
 	rc = of_property_read_u32(node, "qcom,ilim-ma", &temp);
 	if (!rc) {
@@ -2539,9 +2588,9 @@ static int qpnp_haptics_parse_dt(struct hap_chip *chip)
 	if (rc == -EINVAL)
 		rc = 0;
 
-	rc = qpnp_haptics_parse_buffer_dt(chip);
-
-	if (chip->play_mode == HAP_PWM)
+	if (chip->play_mode == HAP_BUFFER)
+		rc = qpnp_haptics_parse_buffer_dt(chip);
+	else if (chip->play_mode == HAP_PWM)
 		rc = qpnp_haptics_parse_pwm_dt(chip);
 
 	return rc;
@@ -2610,7 +2659,7 @@ static int qpnp_haptics_probe(struct platform_device *pdev)
 		}
 	}
 
-	pr_info("haptic probe succeed\n");
+	gchip = chip;
 
 	return 0;
 
-- 
2.48.1

